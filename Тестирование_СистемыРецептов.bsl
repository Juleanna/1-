// Тестовая процедура для проверки функциональности системы рецептов

#Область ТестированиеФункциональности

Процедура ТестироватьСистемуРецептов() Экспорт
    
    Сообщить("=== НАЧАЛО ТЕСТИРОВАНИЯ СИСТЕМЫ КУЛИНАРНЫХ РЕЦЕПТОВ ===");
    
    // 1. Создаем тестовый рецепт
    НовыйРецепт = СоздатьТестовыйРецепт();
    
    // 2. Проверяем расчет себестоимости
    ПроверитьРасчетСебестоимости(НовыйРецепт);
    
    // 3. Симулируем продажу блюда
    СимулироватьПродажуБлюда(НовыйРецепт);
    
    // 4. Проверяем списание ингредиентов
    ПроверитьСписаниеИнгредиентов(НовыйРецепт);
    
    // 5. Анализируем данные
    АнализироватьДанныеПоРецепту(НовыйРецепт);
    
    Сообщить("=== ТЕСТИРОВАНИЕ ЗАВЕРШЕНО ===");
    
КонецПроцедуры

Функция СоздатьТестовыйРецепт()
    
    Сообщить("1. Создание тестового рецепта 'Борщ украинский'...");
    
    // Создаем новый рецепт
    НовыйРецепт = Справочники.КулинарныеРецепты.СозданиеЭлемента();
    НовыйРецепт.Код = "TEST001";
    НовыйРецепт.Наименование = "Борщ украинский (ТЕСТ)";
    НовыйРецепт.КатегорияБлюда = Перечисления.КатегорииБлюд.Супы;
    НовыйРецепт.ВремяПриготовления = 120; // 2 часа
    НовыйРецепт.КоличествоПорций = 4;
    НовыйРецепт.ТехнологияПриготовления = 
    "1. Отварить мясо до готовности
    |2. Добавить нарезанные овощи
    |3. Варить до мягкости овощей
    |4. Добавить специи и зелень
    |5. Дать настояться 10 минут";
    
    // Поиск готового блюда в номенклатуре (предполагается что оно уже создано)
    ГотовоеБлюдо = НайтиИлиСоздатьНоменклатуру("Борщ украинский", Перечисления.ВидыНоменклатуры.ГотовоеБлюдо);
    НовыйРецепт.ГотовоеБлюдо = ГотовоеБлюдо;
    
    // Добавляем ингредиенты
    ДобавитьИнгредиентВРецепт(НовыйРецепт, "Говядина", 400, "грамм", 350); // 350 руб/кг
    ДобавитьИнгредиентВРецепт(НовыйРецепт, "Свекла", 200, "грамм", 45);   // 45 руб/кг  
    ДобавитьИнгредиентВРецепт(НовыйРецепт, "Морковь", 150, "грамм", 40);  // 40 руб/кг
    ДобавитьИнгредиентВРецепт(НовыйРецепт, "Лук репчатый", 100, "грамм", 30); // 30 руб/кг
    ДобавитьИнгредиентВРецепт(НовыйРецепт, "Капуста белокочанная", 300, "грамм", 25); // 25 руб/кг
    ДобавитьИнгредиентВРецепт(НовыйРецепт, "Масло подсолнечное", 50, "мл", 120); // 120 руб/л
    
    // Рассчитываем себестоимость
    РассчитатьСебестоимостьРецепта(НовыйРецепт);
    
    // Записываем рецепт
    НовыйРецепт.Записать();
    
    Сообщить("   Рецепт создан: " + НовыйРецепт);
    Сообщить("   Себестоимость порции: " + НовыйРецепт.СебестоимостьПорции + " руб.");
    
    Возврат НовыйРецепт.Ссылка;
    
КонецФункции

Процедура ДобавитьИнгредиентВРецепт(Рецепт, НаименованиеИнгредиента, Количество, ЕдиницаИзмерения, ЦенаЗаКг)
    
    // Находим или создаем номенклатуру ингредиента
    Ингредиент = НайтиИлиСоздатьНоменклатуру(НаименованиеИнгредиента, Перечисления.ВидыНоменклатуры.Материал);
    
    // Добавляем строку в табличную часть
    НоваяСтрока = Рецепт.СоставИнгредиентов.Добавить();
    НоваяСтрока.НомерСтроки = Рецепт.СоставИнгредиентов.Количество();
    НоваяСтрока.Ингредиент = Ингредиент;
    НоваяСтрока.Количество = Количество;
    НоваяСтрока.ЕдиницаИзмерения = НайтиЕдиницуИзмерения(ЕдиницаИзмерения);
    
    // Рассчитываем стоимость
    Если ЕдиницаИзмерения = "грамм" Тогда
        НоваяСтрока.СтоимостьЕдиницы = ЦенаЗаКг / 1000; // переводим в руб/грамм
    ИначеЕсли ЕдиницаИзмерения = "мл" Тогда
        НоваяСтрока.СтоимостьЕдиницы = ЦенаЗаКг / 1000; // переводим в руб/мл
    Иначе
        НоваяСтрока.СтоимостьЕдиницы = ЦенаЗаКг;
    КонецЕсли;
    
    НоваяСтрока.СуммаСтоимости = НоваяСтрока.Количество * НоваяСтрока.СтоимостьЕдиницы;
    
КонецПроцедуры

Функция НайтиИлиСоздатьНоменклатуру(Наименование, ВидНоменклатуры)
    
    // Ищем существующую номенклатуру
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Номенклатура.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник.Номенклатура КАК Номенклатура
    |ГДЕ
    |    Номенклатура.Наименование = &Наименование
    |    И НЕ Номенклатура.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("Наименование", Наименование);
    
    Результат = Запрос.Выполнить();
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Возврат Выборка.Ссылка;
    КонецЕсли;
    
    // Создаем новую номенклатуру
    НоваяНоменклатура = Справочники.Номенклатура.СозданиеЭлемента();
    НоваяНоменклатура.Наименование = Наименование;
    НоваяНоменклатура.ВидНоменклатуры = ВидНоменклатуры;
    НоваяНоменклатура.Записать();
    
    Возврат НоваяНоменклатура.Ссылка;
    
КонецФункции

Функция НайтиЕдиницуИзмерения(Наименование)
    
    // Простая заглушка - в реальной системе нужно искать в классификаторе
    Возврат Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Наименование);
    
КонецФункции

Процедура РассчитатьСебестоимостьРецепта(Рецепт)
    
    СуммарнаяСебестоимость = 0;
    
    Для Каждого СтрокаИнгредиент Из Рецепт.СоставИнгредиентов Цикл
        СуммарнаяСебестоимость = СуммарнаяСебестоимость + СтрокаИнгредиент.СуммаСтоимости;
    КонецЦикла;
    
    Рецепт.СебестоимостьПорции = СуммарнаяСебестоимость / Рецепт.КоличествоПорций;
    
КонецПроцедуры

Процедура ПроверитьРасчетСебестоимости(РецептСсылка)
    
    Сообщить("2. Проверка расчета себестоимости...");
    
    РецептОбъект = РецептСсылка.ПолучитьОбъект();
    
    СуммаПоИнгредиентам = 0;
    Для Каждого Строка Из РецептОбъект.СоставИнгредиентов Цикл
        СуммаПоИнгредиентам = СуммаПоИнгредиентам + Строка.СуммаСтоимости;
        Сообщить("   " + Строка.Ингредиент + ": " + Строка.Количество + " " + Строка.ЕдиницаИзмерения + " = " + Строка.СуммаСтоимости + " руб.");
    КонецЦикла;
    
    РассчетнаяСебестоимость = СуммаПоИнгредиентам / РецептОбъект.КоличествоПорций;
    
    Сообщить("   Общая стоимость ингредиентов: " + СуммаПоИнгредиентам + " руб.");
    Сообщить("   Себестоимость порции (расчетная): " + РассчетнаяСебестоимость + " руб.");
    Сообщить("   Себестоимость порции (сохраненная): " + РецептОбъект.СебестоимостьПорции + " руб.");
    
    Если Abs(РассчетнаяСебестоимость - РецептОбъект.СебестоимостьПорции) < 0.01 Тогда
        Сообщить("   ✓ ТЕСТ ПРОЙДЕН: Себестоимость рассчитана правильно");
    Иначе
        Сообщить("   ✗ ТЕСТ НЕ ПРОЙДЕН: Ошибка в расчете себестоимости");
    КонецЕсли;
    
КонецПроцедуры

Процедура СимулироватьПродажуБлюда(РецептСсылка)
    
    Сообщить("3. Симуляция продажи блюда через кассу...");
    
    // Создаем документ продажи (упрощенная версия)
    ДокументПродажи = Документы.ПродажиТоваровУслуг.СозданиеДокумента();
    ДокументПродажи.Дата = ТекущаяДата();
    ДокументПродажи.Автор = Пользователи.ТекущийПользователь();
    ДокументПродажи.Склад = ПолучитьОсновнойСклад();
    
    // Добавляем проданное блюдо
    НоваяСтрока = ДокументПродажи.Товары.Добавить();
    НоваяСтрока.Номенклатура = РецептСсылка.ГотовоеБлюдо;
    НоваяСтрока.Количество = 2; // продали 2 порции
    НоваяСтрока.Цена = 250; // цена порции
    НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
    
    Сообщить("   Создан документ продажи: " + ДокументПродажи);
    Сообщить("   Продано: " + НоваяСтрока.Номенклатура + " - " + НоваяСтрока.Количество + " порций");
    
    // Проводим документ (здесь сработает автоматическое списание ингредиентов)
    Попытка
        ДокументПродажи.Записать(РежимЗаписиДокумента.Проведение);
        Сообщить("   ✓ Документ проведен успешно");
    Исключение
        Сообщить("   ✗ Ошибка при проведении: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

Процедура ПроверитьСписаниеИнгредиентов(РецептСсылка)
    
    Сообщить("4. Проверка автоматического списания ингредиентов...");
    
    // Получаем движения по регистру списания по рецептам
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    СписаниеПоРецептам.Регистратор КАК Документ,
    |    СписаниеПоРецептам.Рецепт КАК Рецепт,
    |    СписаниеПоРецептам.ГотовоеБлюдо КАК ГотовоеБлюдо,
    |    СписаниеПоРецептам.Ингредиент КАК Ингредиент,
    |    СписаниеПоРецептам.КоличествоПорций КАК КоличествоПорций,
    |    СписаниеПоРецептам.КоличествоИнгредиента КАК КоличествоИнгредиента,
    |    СписаниеПоРецептам.СтоимостьИнгредиента КАК СтоимостьИнгредиента
    |ИЗ
    |    РегистрНакопления.СписаниеПоРецептам КАК СписаниеПоРецептам
    |ГДЕ
    |    СписаниеПоРецептам.Рецепт = &Рецепт
    |    И СписаниеПоРецептам.Период >= &НачалоДня
    |УПОРЯДОЧИТЬ ПО
    |    СписаниеПоРецептам.Ингредиент.Наименование";
    
    Запрос.УстановитьПараметр("Рецепт", РецептСсылка);
    Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
    
    Результат = Запрос.Выполнить();
    
    Если Результат.Пустой() Тогда
        Сообщить("   ✗ ТЕСТ НЕ ПРОЙДЕН: Не найдено движений по списанию ингредиентов");
        Возврат;
    КонецЕсли;
    
    Выборка = Результат.Выбрать();
    ОбщаяСтоимостьСписанных = 0;
    КоличествоИнгредиентов = 0;
    
    Пока Выборка.Следующий() Цикл
        КоличествоИнгредиентов = КоличествоИнгредиентов + 1;
        ОбщаяСтоимостьСписанных = ОбщаяСтоимостьСписанных + Выборка.СтоимостьИнгредиента;
        
        Сообщить("   Списан ингредиент: " + Выборка.Ингредиент + 
                 " - " + Выборка.КоличествоИнгредиента + 
                 " на сумму " + Выборка.СтоимостьИнгредиента + " руб.");
    КонецЦикла;
    
    Сообщить("   Всего списано ингредиентов: " + КоличествоИнгредиентов);
    Сообщить("   Общая стоимость списанных ингредиентов: " + ОбщаяСтоимостьСписанных + " руб.");
    
    // Проверяем соответствие списанного количества рецепту
    РецептОбъект = РецептСсылка.ПолучитьОбъект();
    КоличествоИнгредиентовВРецепте = РецептОбъект.СоставИнгредиентов.Количество();
    
    Если КоличествоИнгредиентов = КоличествоИнгредиентовВРецепте Тогда
        Сообщить("   ✓ ТЕСТ ПРОЙДЕН: Списаны все ингредиенты из рецепта");
    Иначе
        Сообщить("   ✗ ТЕСТ НЕ ПРОЙДЕН: Количество списанных ингредиентов не соответствует рецепту");
    КонецЕсли;
    
КонецПроцедуры

Процедура АнализироватьДанныеПоРецепту(РецептСсылка)
    
    Сообщить("5. Анализ данных по рецепту...");
    
    // Используем обработку анализа себестоимости
    Обработка = Обработки.АнализСебестоимостиБлюд.Создать();
    
    ПараметрыОтчета = Новый Структура;
    ПараметрыОтчета.Вставить("НачалоПериода", НачалоДня(ТекущаяДата()));
    ПараметрыОтчета.Вставить("КонецПериода", КонецДня(ТекущаяДата()));
    ПараметрыОтчета.Вставить("Склад", Неопределено);
    
    ТаблицаАнализа = Обработка.ПолучитьДанныеДляАнализа(ПараметрыОтчета);
    
    Для Каждого Строка Из ТаблицаАнализа Цикл
        Если Строка.Рецепт = РецептСсылка Тогда
            Сообщить("   Рецепт: " + Строка.Рецепт);
            Сообщить("   Блюдо: " + Строка.ГотовоеБлюдо);
            Сообщить("   Приготовлено порций: " + Строка.КоличествоПорций);
            Сообщить("   Себестоимость порции: " + Строка.СебестоимостьПорции + " руб.");
            Сообщить("   Общая себестоимость: " + Строка.СуммарнаяСебестоимость + " руб.");
            Сообщить("   Использовано ингредиентов: " + Строка.КоличествоИнгредиентов);
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    Сообщить("   ✓ АНАЛИЗ ЗАВЕРШЕН");
    
КонецПроцедуры

Функция ПолучитьОсновнойСклад()
    
    // Заглушка - возвращаем первый попавшийся склад
    Возврат Справочники.Склады.НайтиПоНаименованию("Основной склад");
    
КонецФункции

#КонецОбласти