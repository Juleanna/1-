// Обработка для анализа себестоимости блюд и использования ингредиентов

#Область ПрограммныйИнтерфейс

&НаСервере
Функция ПолучитьДанныеДляАнализа(ПараметрыОтчета) Экспорт
    
    НачалоПериода = ПараметрыОтчета.НачалоПериода;
    КонецПериода = ПараметрыОтчета.КонецПериода;
    Склад = ПараметрыОтчета.Склад;
    
    // Формируем отчет по использованию ингредиентов
    ТаблицаРезультат = Новый ТаблицаЗначений;
    ТаблицаРезультат.Колонки.Добавить("Рецепт", Новый ОписаниеТипов("СправочникСсылка.КулинарныеРецепты"));
    ТаблицаРезультат.Колонки.Добавить("ГотовоеБлюдо", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
    ТаблицаРезультат.Колонки.Добавить("КоличествоПорций", Новый ОписаниеТипов("Число"));
    ТаблицаРезультат.Колонки.Добавить("СуммарнаяСебестоимость", Новый ОписаниеТипов("Число"));
    ТаблицаРезультат.Колонки.Добавить("СебестоимостьПорции", Новый ОписаниеТипов("Число"));
    ТаблицаРезультат.Колонки.Добавить("КоличествоИнгредиентов", Новый ОписаниеТипов("Число"));
    
    // Основной запрос по движениям регистра
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    СписаниеПоРецептамОбороты.Рецепт КАК Рецепт,
    |    СписаниеПоРецептамОбороты.ГотовоеБлюдо КАК ГотовоеБлюдо,
    |    СУММА(СписаниеПоРецептамОбороты.КоличествоПорцийОборот) КАК КоличествоПорций,
    |    СУММА(СписаниеПоРецептамОбороты.СтоимостьИнгредиентаОборот) КАК СуммарнаяСебестоимость,
    |    КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписаниеПоРецептамОбороты.Ингредиент) КАК КоличествоИнгредиентов
    |ИЗ
    |    РегистрНакопления.СписаниеПоРецептам.Обороты(&НачалоПериода, &КонецПериода, Автоматически, &ОтборСклад) КАК СписаниеПоРецептамОбороты
    |СГРУППИРОВАТЬ ПО
    |    СписаниеПоРецептамОбороты.Рецепт,
    |    СписаниеПоРецептамОбороты.ГотовоеБлюдо";
    
    Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
    Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
    
    Если ЗначениеЗаполнено(Склад) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборСклад", "Склад = &Склад");
        Запрос.УстановитьПараметр("Склад", Склад);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборСклад", "");
    КонецЕсли;
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        
        НоваяСтрока = ТаблицаРезультат.Добавить();
        ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
        
        // Рассчитываем себестоимость порции
        Если Выборка.КоличествоПорций > 0 Тогда
            НоваяСтрока.СебестоимостьПорции = Выборка.СуммарнаяСебестоимость / Выборка.КоличествоПорций;
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат ТаблицаРезультат;
    
КонецФункции

&НаСервере
Функция ПолучитьДетализациюПоИнгредиентам(Рецепт, НачалоПериода, КонецПериода, Склад = Неопределено) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    СписаниеПоРецептамОбороты.Ингредиент КАК Ингредиент,
    |    СписаниеПоРецептамОбороты.Ингредиент.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
    |    СУММА(СписаниеПоРецептамОбороты.КоличествоИнгредиентаОборот) КАК КоличествоИспользовано,
    |    СУММА(СписаниеПоРецептамОбороты.СтоимостьИнгредиентаОборот) КАК СтоимостьИспользовано,
    |    СРЕДНЕЕ(СписаниеПоРецептамОбороты.СтоимостьИнгредиентаОборот / СписаниеПоРецептамОбороты.КоличествоИнгредиентаОборот) КАК СредняяЦенаЗаПериод
    |ИЗ
    |    РегистрНакопления.СписаниеПоРецептам.Обороты(&НачалоПериода, &КонецПериода, Автоматически, Рецепт = &Рецепт &ОтборСклад) КАК СписаниеПоРецептамОбороты
    |ГДЕ
    |    СписаниеПоРецептамОбороты.КоличествоИнгредиентаОборот > 0
    |СГРУППИРОВАТЬ ПО
    |    СписаниеПоРецептамОбороты.Ингредиент,
    |    СписаниеПоРецептамОбороты.Ингредиент.БазоваяЕдиницаИзмерения
    |УПОРЯДОЧИТЬ ПО
    |    СтоимостьИспользовано УБЫВ";
    
    Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
    Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
    Запрос.УстановитьПараметр("Рецепт", Рецепт);
    
    Если ЗначениеЗаполнено(Склад) Тогда
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборСклад", "И Склад = &Склад");
        Запрос.УстановитьПараметр("Склад", Склад);
    Иначе
        Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборСклад", "");
    КонецЕсли;
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

&НаСервере
Функция РассчитатьПрогнозныеПотребности(РецептыДляРасчета, ПрогнозПродаж) Экспорт
    
    // РецептыДляРасчета - таблица с колонками: Рецепт, КоличествоПланируемыхПорций
    // Возвращает таблицу потребностей в ингредиентах
    
    ТаблицаПотребностей = Новый ТаблицаЗначений;
    ТаблицаПотребностей.Колонки.Добавить("Ингредиент", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
    ТаблицаПотребностей.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
    ТаблицаПотребностей.Колонки.Добавить("ПотребноеКоличество", Новый ОписаниеТипов("Число"));
    ТаблицаПотребностей.Колонки.Добавить("ПредполагаемаяСтоимость", Новый ОписаниеТипов("Число"));
    ТаблицаПотребностей.Колонки.Добавить("КоличествоРецептов", Новый ОписаниеТипов("Число"));
    
    Для Каждого СтрокаРецепта Из РецептыДляРасчета Цикл
        
        // Получаем состав ингредиентов для рецепта
        СоставИнгредиентов = ПолучитьСоставИнгредиентовРецепта(СтрокаРецепта.Рецепт);
        
        Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
            
            КоличествоНаПорцию = СтрокаИнгредиент.Количество / СтрокаИнгредиент.КоличествоПорцийВРецепте;
            ТребуемоеКоличество = КоличествоНаПорцию * СтрокаРецепта.КоличествоПланируемыхПорций;
            
            // Ищем ингредиент в таблице потребностей
            СтрокиИнгредиента = ТаблицаПотребностей.НайтиСтроки(Новый Структура("Ингредиент", СтрокаИнгредиент.Ингредиент));
            
            Если СтрокиИнгредиента.Количество() > 0 Тогда
                // Увеличиваем потребность
                СтрокаПотребности = СтрокиИнгредиента[0];
                СтрокаПотребности.ПотребноеКоличество = СтрокаПотребности.ПотребноеКоличество + ТребуемоеКоличество;
                СтрокаПотребности.ПредполагаемаяСтоимость = СтрокаПотребности.ПредполагаемаяСтоимость + ТребуемоеКоличество * СтрокаИнгредиент.СтоимостьЕдиницы;
                СтрокаПотребности.КоличествоРецептов = СтрокаПотребности.КоличествоРецептов + 1;
            Иначе
                // Добавляем новый ингредиент
                НоваяСтрока = ТаблицаПотребностей.Добавить();
                НоваяСтрока.Ингредиент = СтрокаИнгредиент.Ингредиент;
                НоваяСтрока.ЕдиницаИзмерения = СтрокаИнгредиент.ЕдиницаИзмерения;
                НоваяСтрока.ПотребноеКоличество = ТребуемоеКоличество;
                НоваяСтрока.ПредполагаемаяСтоимость = ТребуемоеКоличество * СтрокаИнгредиент.СтоимостьЕдиницы;
                НоваяСтрока.КоличествоРецептов = 1;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;
    
    // Сортируем по убыванию стоимости
    ТаблицаПотребностей.Сортировать("ПредполагаемаяСтоимость УБЫВ");
    
    Возврат ТаблицаПотребностей;
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоставИнгредиентовРецепта(Рецепт)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    КулинарныеРецептыСоставИнгредиентов.Ингредиент КАК Ингредиент,
    |    КулинарныеРецептыСоставИнгредиентов.Количество КАК Количество,
    |    КулинарныеРецептыСоставИнгредиентов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
    |    КулинарныеРецептыСоставИнгредиентов.СтоимостьЕдиницы КАК СтоимостьЕдиницы,
    |    КулинарныеРецепты.КоличествоПорций КАК КоличествоПорцийВРецепте
    |ИЗ
    |    Справочник.КулинарныеРецепты.СоставИнгредиентов КАК КулинарныеРецептыСоставИнгредиентов
    |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КулинарныеРецепты КАК КулинарныеРецепты
    |        ПО КулинарныеРецептыСоставИнгредиентов.Ссылка = КулинарныеРецепты.Ссылка
    |ГДЕ
    |    КулинарныеРецепты.Ссылка = &Рецепт
    |    И КулинарныеРецептыСоставИнгредиентов.Количество > 0";
    
    Запрос.УстановитьПараметр("Рецепт", Рецепт);
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

#КонецОбласти