// Форма документа "Приготовление блюда"

#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущаяСтрокаПриготавливаемыеБлюда;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    // Инициализация формы
    Если Объект.Ссылка.Пустая() Тогда
        
        // Заполнение значений по умолчанию для нового документа
        Объект.Дата = ТекущаяДата();
        Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
        
        // Попытка заполнить склады по умолчанию
        СкладПоУмолчанию = ПолучитьСкладПоУмолчанию();
        Если ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
            Объект.СкладСырья = СкладПоУмолчанию;
            Объект.СкладГотовойПродукции = СкладПоУмолчанию;
        КонецЕсли;
        
    КонецЕсли;
    
    // Настройка элементов формы
    НастроитьЭлементыФормы();
    
    // Настройка командных панелей
    НастроитьКоманды();
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // Обновляем данные при открытии
    ОбновитьИтогиНаКлиенте();
    
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    // Проверки перед записью
    Если НЕ ЗначениеЗаполнено(ТекущийОбъект.СкладСырья) Тогда
        Сообщить("Не заполнен склад сырья");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ТекущийОбъект.СкладГотовойПродукции) Тогда
        Сообщить("Не заполнен склад готовой продукции");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
    Если ТекущийОбъект.ПриготавливаемыеБлюда.Количество() = 0 Тогда
        Сообщить("Не заполнен список приготавливаемых блюд");
        Отказ = Истина;
        Возврат;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    
    // Оповещаем о записи документа
    Оповестить("ЗаписанДокументПриготовлениеБлюда", Объект.Ссылка);
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладСырьяПриИзменении(Элемент)
    
    СкладСырьяПриИзмененииНаСервере();
    
КонецПроцедуры

&НаСервере
Процедура СкладСырьяПриИзмененииНаСервере()
    
    // Можно добавить проверку доступности ингредиентов на складе
    // И предупреждение пользователя о возможных проблемах
    
КонецПроцедуры

&НаКлиенте
Процедура СкладГотовойПродукцииПриИзменении(Элемент)
    
    СкладГотовойПродукцииПриИзмененииНаСервере();
    
КонецПроцедуры

&НаСервере
Процедура СкладГотовойПродукцииПриИзмененииНаСервере()
    
    // Можно добавить проверки по размещению готовой продукции
    
КонецПроцедуры

&НаКлиенте
Процедура ПоварПриИзменении(Элемент)
    
    // Можно добавить проверку квалификации повара для выбранных блюд
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриготавливаемыеБлюда

&НаКлиенте
Процедура ПриготавливаемыеБлюдаПриАктивизацииСтроки(Элемент)
    
    ТекущаяСтрокаПриготавливаемыеБлюда = Элемент.ТекущиеДанные;
    
КонецПроцедуры

&НаКлиенте
Процедура ПриготавливаемыеБлюдаПриИзменении(Элемент)
    
    ОбновитьИтогиНаКлиенте();
    
КонецПроцедуры

&НаКлиенте
Процедура ПриготавливаемыеБлюдаБлюдоПриИзменении(Элемент)
    
    ТекущаяСтрока = Элементы.ПриготавливаемыеБлюда.ТекущиеДанные;
    Если ТекущаяСтрока = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ПриготавливаемыеБлюдаБлюдоПриИзмененииНаСервере(ТекущаяСтрока);
    ОбновитьИтогиНаКлиенте();
    
КонецПроцедуры

&НаСервере
Процедура ПриготавливаемыеБлюдаБлюдоПриИзмененииНаСервере(ТекущаяСтрока)
    
    Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Блюдо) Тогда
        ТекущаяСтрока.ПлановаяСебестоимостьПорции = 0;
        ТекущаяСтрока.ОбщаяПлановаяСебестоимость = 0;
        Возврат;
    КонецЕсли;
    
    // Заполняем плановую себестоимость
    ТекущаяСтрока.ПлановаяСебестоимостьПорции = ПолучитьСебестоимостьПорции(ТекущаяСтрока.Блюдо);
    
    // Пересчитываем общую себестоимость
    Если ТекущаяСтрока.КоличествоПорций > 0 Тогда
        ТекущаяСтрока.ОбщаяПлановаяСебестоимость = ТекущаяСтрока.ПлановаяСебестоимостьПорции * ТекущаяСтрока.КоличествоПорций;
    КонецЕсли;
    
    // Проверяем наличие рецепта
    Рецепт = НайтиРецептДляБлюда(ТекущаяСтрока.Блюдо);
    Если НЕ ЗначениеЗаполнено(Рецепт) Тогда
        ТекстПредупреждения = СтрШаблон("Для блюда ""%1"" не найден активный рецепт. Приготовление может быть невозможно.", ТекущаяСтрока.Блюдо);
        ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения, , "Объект.ПриготавливаемыеБлюда[" + (Объект.ПриготавливаемыеБлюда.Индекс(ТекущаяСтрока)) + "].Блюдо");
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПриготавливаемыеБлюдаКоличествоПорцийПриИзменении(Элемент)
    
    ТекущаяСтрока = Элементы.ПриготавливаемыеБлюда.ТекущиеДанные;
    Если ТекущаяСтрока = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    // Пересчитываем общую себестоимость
    Если ЗначениеЗаполнено(ТекущаяСтрока.Блюдо) И ТекущаяСтрока.КоличествоПорций > 0 Тогда
        ТекущаяСтрока.ОбщаяПлановаяСебестоимость = ТекущаяСтрока.ПлановаяСебестоимостьПорции * ТекущаяСтрока.КоличествоПорций;
    Иначе
        ТекущаяСтрока.ОбщаяПлановаяСебестоимость = 0;
    КонецЕсли;
    
    ОбновитьИтогиНаКлиенте();
    
КонецПроцедуры

&НаКлиенте
Процедура ПриготавливаемыеБлюдаПриУдалении(Элемент, ОтменаУдаления)
    
    ОбновитьИтогиНаКлиенте();
    
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ПроверитьНаличиеИнгредиентов(Команда)
    
    ПроверитьНаличиеИнгредиентовНаСервере();
    
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеИнгредиентовНаСервере()
    
    Если НЕ ЗначениеЗаполнено(Объект.СкладСырья) Тогда
        Сообщить("Укажите склад сырья");
        Возврат;
    КонецЕсли;
    
    Если Объект.ПриготавливаемыеБлюда.Количество() = 0 Тогда
        Сообщить("Добавьте блюда для приготовления");
        Возврат;
    КонецЕсли;
    
    ТекстПроверки = "";
    ЕстьНедостатки = Ложь;
    
    Для Каждого СтрокаБлюда Из Объект.ПриготавливаемыеБлюда Цикл
        
        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
            
            СоставИнгредиентов = ПолучитьСоставИнгредиентовДляБлюда(СтрокаБлюда.Блюдо);
            
            Если СоставИнгредиентов.Количество() = 0 Тогда
                ТекстПроверки = ТекстПроверки + СтрШаблон("
                |⚠ Блюдо ""%1"" - не найден состав ингредиентов", СтрокаБлюда.Блюдо);
                ЕстьНедостатки = Истина;
                Продолжить;
            КонецЕсли;
            
            Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
                
                КоличествоДляСписания = СтрокаИнгредиент.КоличествоНаПорцию * СтрокаБлюда.КоличествоПорций;
                ОстатокНаСкладе = ПолучитьОстатокНоменклатурыНаСкладе(СтрокаИнгредиент.Ингредиент, Объект.СкладСырья, ТекущаяДата());
                
                Если ОстатокНаСкладе < КоличествоДляСписания Тогда
                    ТекстПроверки = ТекстПроверки + СтрШаблон("
                    |❌ %1 - требуется %2 кг, доступно %3 кг (недостаток %4 кг)",
                    СтрокаИнгредиент.Ингредиент,
                    КоличествоДляСписания,
                    ОстатокНаСкладе,
                    КоличествоДляСписания - ОстатокНаСкладе);
                    ЕстьНедостатки = Истина;
                Иначе
                    ТекстПроверки = ТекстПроверки + СтрШаблон("
                    |✅ %1 - требуется %2 кг, доступно %3 кг",
                    СтрокаИнгредиент.Ингредиент,
                    КоличествоДляСписания,
                    ОстатокНаСкладе);
                КонецЕсли;
                
            КонецЦикла;
            
        КонецЕсли;
        
    КонецЦикла;
    
    Если ПустаяСтрока(ТекстПроверки) Тогда
        Сообщить("Нет данных для проверки");
    ИначеЕсли НЕ ЕстьНедостатки Тогда
        Сообщить("✅ Все ингредиенты доступны для приготовления:" + ТекстПроверки);
    Иначе
        Сообщить("⚠ Результат проверки наличия:" + ТекстПроверки);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
    
    ЗаполнитьПоОстаткамНаСервере();
    
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСервере()
    
    Если НЕ ЗначениеЗаполнено(Объект.СкладГотовойПродукции) Тогда
        Сообщить("Укажите склад готовой продукции");
        Возврат;
    КонецЕсли;
    
    // Получаем блюда с низкими остатками
    БлюдаДляПополнения = ПолучитьБлюдаДляПополнения();
    
    Если БлюдаДляПополнения.Количество() = 0 Тогда
        Сообщить("Не найдены блюда для пополнения запасов");
        Возврат;
    КонецЕсли;
    
    // Очищаем текущий список
    Объект.ПриготавливаемыеБлюда.Очистить();
    
    // Заполняем по данным остатков
    Для Каждого СтрокаБлюда Из БлюдаДляПополнения Цикл
        
        НоваяСтрока = Объект.ПриготавливаемыеБлюда.Добавить();
        НоваяСтрока.Блюдо = СтрокаБлюда.Блюдо;
        НоваяСтрока.КоличествоПорций = СтрокаБлюда.РекомендуемоеКоличество;
        НоваяСтрока.ПлановаяСебестоимостьПорции = ПолучитьСебестоимостьПорции(СтрокаБлюда.Блюдо);
        НоваяСтрока.ОбщаяПлановаяСебестоимость = НоваяСтрока.ПлановаяСебестоимостьПорции * НоваяСтрока.КоличествоПорций;
        
    КонецЦикла;
    
    Сообщить(СтрШаблон("Добавлено %1 блюд для пополнения запасов", БлюдаДляПополнения.Количество()));
    
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоставИнгредиентов(Команда)
    
    ТекущаяСтрока = Элементы.ПриготавливаемыеБлюда.ТекущиеДанные;
    Если ТекущаяСтрока = Неопределено Тогда
        Сообщить("Выберите блюдо в табличной части");
        Возврат;
    КонецЕсли;
    
    Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Блюдо) Тогда
        Сообщить("Не выбрано блюдо");
        Возврат;
    КонецЕсли;
    
    ПоказатьСоставИнгредиентовНаСервере(ТекущаяСтрока.Блюдо, ТекущаяСтрока.КоличествоПорций);
    
КонецПроцедуры

&НаСервере
Процедура ПоказатьСоставИнгредиентовНаСервере(Блюдо, КоличествоПорций)
    
    СоставИнгредиентов = ПолучитьСоставИнгредиентовДляБлюда(Блюдо);
    
    Если СоставИнгредиентов.Количество() = 0 Тогда
        Сообщить(СтрШаблон("Для блюда ""%1"" не найден состав ингредиентов", Блюдо));
        Возврат;
    КонецЕсли;
    
    ТекстСостава = СтрШаблон("Состав ингредиентов для блюда ""%1"" (%2 порций):", Блюдо, КоличествоПорций);
    
    ОбщаяСтоимость = 0;
    
    Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
        
        КоличествоНужно = СтрокаИнгредиент.КоличествоНаПорцию * КоличествоПорций;
        СтоимостьИнгредиента = КоличествоНужно * СтрокаИнгредиент.СтоимостьЕдиницы;
        ОбщаяСтоимость = ОбщаяСтоимость + СтоимостьИнгредиента;
        
        ТекстСостава = ТекстСостава + СтрШаблон("
        |• %1: %2 кг (стоимость %3 руб.)",
        СтрокаИнгредиент.Ингредиент,
        КоличествоНужно,
        СтоимостьИнгредиента);
        
    КонецЦикла;
    
    ТекстСостава = ТекстСостава + СтрШаблон("
    |
    |Общая плановая себестоимость: %1 руб.", ОбщаяСтоимость);
    
    Сообщить(ТекстСостава);
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЭлементыФормы()
    
    // Настройка видимости и доступности элементов формы
    Элементы.ПроверитьНаличиеИнгредиентов.Видимость = Истина;
    Элементы.ЗаполнитьПоОстаткам.Видимость = Истина;
    Элементы.ПоказатьСоставИнгредиентов.Видимость = Истина;
    
КонецПроцедуры

&НаСервере
Процедура НастроитьКоманды()
    
    // Настройка команд в зависимости от состояния документа
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиНаКлиенте()
    
    ВсегоПорций = 0;
    ОбщаяСебестоимость = 0;
    
    Для Каждого СтрокаБлюда Из Объект.ПриготавливаемыеБлюда Цикл
        ВсегоПорций = ВсегоПорций + СтрокаБлюда.КоличествоПорций;
        ОбщаяСебестоимость = ОбщаяСебестоимость + СтрокаБлюда.ОбщаяПлановаяСебестоимость;
    КонецЦикла;
    
    // Можно вывести итоги в заголовок или отдельные поля
    ЭтотОбъект.Заголовок = СтрШаблон("Приготовление блюда %1 от %2 (всего %3 порций на %4 руб.)",
        Объект.Номер,
        Формат(Объект.Дата, "ДФ=dd.MM.yyyy"),
        ВсегоПорций,
        ОбщаяСебестоимость);
    
КонецПроцедуры

&НаСервере
Функция ПолучитьСкладПоУмолчанию()
    
    // Можно реализовать получение склада по умолчанию из настроек
    // Для примера возвращаем пустую ссылку
    Возврат Справочники.Склады.ПустаяСсылка();
    
КонецФункции

&НаСервере
Функция НайтиРецептДляБлюда(ГотовоеБлюдо)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    КулинарныеРецепты.Ссылка КАК Рецепт
    |ИЗ
    |    Справочник.КулинарныеРецепты КАК КулинарныеРецепты
    |ГДЕ
    |    КулинарныеРецепты.ГотовоеБлюдо = &ГотовоеБлюдо
    |    И НЕ КулинарныеРецепты.ПометкаУдаления
    |    И КулинарныеРецепты.Активен = ИСТИНА";
    
    Запрос.УстановитьПараметр("ГотовоеБлюдо", ГотовоеБлюдо);
    
    Результат = Запрос.Выполнить();
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Возврат Выборка.Рецепт;
    Иначе
        Возврат Справочники.КулинарныеРецепты.ПустаяСсылка();
    КонецЕсли;
    
КонецФункции

&НаСервере
Функция ПолучитьСоставИнгредиентовДляБлюда(ГотовоеБлюдо)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    ТехкарточкиСоставИнгредиентов.Ингредиент КАК Ингредиент,
    |    ТехкарточкиСоставИнгредиентов.НормаБрутто / 1000 КАК КоличествоНаПорцию,
    |    ""кг"" КАК ЕдиницаИзмерения,
    |    ЕСТЬNULL(ПоследниеЦеныНоменклатуры.Цена, 0) КАК СтоимостьЕдиницы
    |ИЗ
    |    Справочник.Техкарточки.СоставИнгредиентов КАК ТехкарточкиСоставИнгредиентов
    |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КулинарныеРецепты КАК КулинарныеРецепты
    |        ПО ТехкарточкиСоставИнгредиентов.Ссылка = КулинарныеРецепты.Техкарточка
    |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ) КАК ПоследниеЦеныНоменклатуры
    |        ПО ТехкарточкиСоставИнгредиентов.Ингредиент = ПоследниеЦеныНоменклатуры.Номенклатура
    |ГДЕ
    |    КулинарныеРецепты.ГотовоеБлюдо = &ГотовоеБлюдо
    |    И НЕ КулинарныеРецепты.ПометкаУдаления
    |    И НЕ КулинарныеРецепты.Техкарточка.ПометкаУдаления
    |    И ТехкарточкиСоставИнгредиентов.НормаБрутто > 0
    |    И КулинарныеРецепты.Активен = ИСТИНА";
    
    Запрос.УстановитьПараметр("ГотовоеБлюдо", ГотовоеБлюдо);
    Запрос.УстановитьПараметр("Дата", ТекущаяДата());
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

&НаСервере
Функция ПолучитьОстатокНоменклатурыНаСкладе(Номенклатура, Склад, НаДату)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
    |ИЗ
    |    РегистрНакопления.ТоварыНаСкладах.Остатки(&НаДату, Номенклатура = &Номенклатура И Склад = &Склад) КАК ТоварыНаСкладахОстатки";
    
    Запрос.УстановитьПараметр("НаДату", НаДату);
    Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
    Запрос.УстановитьПараметр("Склад", Склад);
    
    Результат = Запрос.Выполнить();
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Возврат ?(Выборка.КоличествоОстаток = Null, 0, Выборка.КоличествоОстаток);
    Иначе
        Возврат 0;
    КонецЕсли;
    
КонецФункции

&НаСервере
Функция ПолучитьСебестоимостьПорции(ГотовоеБлюдо)
    
    СоставИнгредиентов = ПолучитьСоставИнгредиентовДляБлюда(ГотовоеБлюдо);
    Себестоимость = 0;
    
    Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
        Себестоимость = Себестоимость + (СтрокаИнгредиент.КоличествоНаПорцию * СтрокаИнгредиент.СтоимостьЕдиницы);
    КонецЦикла;
    
    Возврат Себестоимость;
    
КонецФункции

&НаСервере
Функция ПолучитьБлюдаДляПополнения()
    
    // Запрос для получения блюд с низкими остатками
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    ТоварыНаСкладахОстатки.Номенклатура КАК Блюдо,
    |    ТоварыНаСкладахОстатки.КоличествоОстаток КАК ТекущийОстаток,
    |    ВЫБОР
    |        КОГДА ТоварыНаСкладахОстатки.КоличествоОстаток <= 0
    |            ТОГДА 10
    |        КОГДА ТоварыНаСкладахОстатки.КоличествоОстаток <= 5
    |            ТОГДА 10 - ТоварыНаСкладахОстатки.КоличествоОстаток
    |        ИНАЧЕ 0
    |    КОНЕЦ КАК РекомендуемоеКоличество
    |ИЗ
    |    РегистрНакопления.ТоварыНаСкладах.Остатки(
    |            &НаДату,
    |            Склад = &Склад
    |                И Номенклатура В (ВЫБРАТЬ
    |                    КулинарныеРецепты.ГотовоеБлюдо
    |                ИЗ
    |                    Справочник.КулинарныеРецепты КАК КулинарныеРецепты
    |                ГДЕ
    |                    НЕ КулинарныеРецепты.ПометкаУдаления
    |                    И КулинарныеРецепты.Активен = ИСТИНА)) КАК ТоварыНаСкладахОстатки
    |ГДЕ
    |    ТоварыНаСкладахОстатки.КоличествоОстаток <= 5
    |
    |УПОРЯДОЧИТЬ ПО
    |    ТоварыНаСкладахОстатки.КоличествоОстаток";
    
    Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
    Запрос.УстановитьПараметр("Склад", Объект.СкладГотовойПродукции);
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

#КонецОбласти