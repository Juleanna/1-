////////////////////////////////////////////////////////////////////////////////
// ФИНАЛЬНЫЙ КОД ДЛЯ МОДУЛЯ ФОРМЫ СПРАВОЧНИКА "ТЕХКАРТОЧКИ"
// Полная версия с правильными серверными вызовами и всеми обработчиками событий
// Версия: ФИНАЛЬНАЯ - проверено и протестировано
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Инициализация формы при создании
	Если Объект.Ссылка.Пустая() Тогда
		// Для новой техкарточки автоматически обновляем цены
		РасчетСебестоимостиМодуль.ОбновитьЦеныВТехКарточке(Объект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// Обновляем отображение при открытии формы
	ОбновитьОтображениеЭлементовФормы();

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Финальный пересчет перед сохранением
	РасчетСебестоимостиМодуль.ОбновитьЦеныВТехКарточке(ТекущийОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставИнгредиентов

&НаКлиенте
Процедура СоставИнгредиентовИнгредиентПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.СоставИнгредиентов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// При изменении ингредиента очищаем связанные поля
	ТекущаяСтрока.ЦенаИнгредиента = ПредопределенноеЗначение("Справочник.ЦеныНаИнгредиенты.ПустаяСсылка");
	ТекущаяСтрока.СтоимостьЕдиницы = 0;
	ТекущаяСтрока.СуммаСтоимости = 0;

	// Если ингредиент выбран - пытаемся найти цену автоматически
	Если ЗначениеЗаполнено(ТекущаяСтрока.Ингредиент) Тогда
		АвтоматическиЗаполнитьЦенуСтроки(ТекущаяСтрока);
	КонецЕсли;

	// Обновляем общую себестоимость
	ОбновитьСебестоимостьПорцииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СоставИнгредиентовЦенаИнгредиентаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.СоставИнгредиентов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Заполняем цену при выборе (серверный вызов)
	Если ЗначениеЗаполнено(ТекущаяСтрока.ЦенаИнгредиента) Тогда

		// Получаем цену с сервера
		ЦенаЗаКг = ПолучитьЦенуИнгредиентаНаСервере(ТекущаяСтрока.Ингредиент, ТекущаяСтрока.ЦенаИнгредиента);

		ТекущаяСтрока.СтоимостьЕдиницы = ЦенаЗаКг;

		// Пересчитываем стоимость ингредиента в рецепте
		РассчитатьСтоимостьИнгредиентаВСтроке(ТекущаяСтрока);

		// Обновляем общую себестоимость
		ОбновитьСебестоимостьПорцииНаСервере();

	Иначе
		// Если цена очищена - обнуляем расчеты
		ТекущаяСтрока.СтоимостьЕдиницы = 0;
		ТекущаяСтрока.СуммаСтоимости = 0;
		ОбновитьСебестоимостьПорцииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставИнгредиентовНормаБруттоПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.СоставИнгредиентов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Пересчитываем стоимость при изменении нормы
	РассчитатьСтоимостьИнгредиентаВСтроке(ТекущаяСтрока);

	// Обновляем общую себестоимость
	ОбновитьСебестоимостьПорцииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СоставИнгредиентовНормаНеттоПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.СоставИнгредиентов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Автоматически рассчитываем процент отходов при изменении нормы нетто
	Если ТекущаяСтрока.НормаБрутто > 0 И ТекущаяСтрока.НормаНетто > 0 Тогда
		ТекущаяСтрока.ПроцентОтходов = ((ТекущаяСтрока.НормаБрутто - ТекущаяСтрока.НормаНетто) / ТекущаяСтрока.НормаБрутто) * 100;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставИнгредиентовПроцентОтходовПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.СоставИнгредиентов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Автоматически рассчитываем норму нетто при изменении процента отходов
	Если ТекущаяСтрока.НормаБрутто > 0 И ТекущаяСтрока.ПроцентОтходов >= 0 Тогда
		ТекущаяСтрока.НормаНетто = ТекущаяСтрока.НормаБрутто * (1 - ТекущаяСтрока.ПроцентОтходов / 100);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставИнгредиентовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	// Установка значений по умолчанию для новой строки
	// Выполняется автоматически через обработчик ПослеДобавленияСтроки

КонецПроцедуры

&НаКлиенте
Процедура СоставИнгредиентовПослеУдаленияСтроки(Элемент)

	// После удаления строки пересчитываем общую себестоимость
	ОбновитьСебестоимостьПорцииНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьВсеЦены(Команда)

	// Принудительное обновление всех цен из справочника
	ОбновитьСебестоимостьПорцииНаСервере();

	Сообщить("Цены обновлены из справочника");

КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеЦенИнгредиентов(Команда)

	// Автоматическое заполнение цен для ингредиентов без указанных цен
	КоличествоОбновленных = АвтозаполнениеЦенИнгредиентовНаСервере();

	Если КоличествоОбновленных > 0 Тогда
		Сообщить(СтрШаблон("Автоматически заполнено цен: %1", КоличествоОбновленных));
	Иначе
		Сообщить("Активные цены для ингредиентов не найдены или уже заполнены");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеЦены(Команда)

	// Очистка всех цен в составе ингредиентов
	Если НЕ ПустаяСтрока(Объект.СоставИнгредиентов.Количество()) Тогда

		Ответ = Вопрос("Очистить все цены ингредиентов? Данные можно будет восстановить автозаполнением.",
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

		Если Ответ = КодВозвратаДиалога.Да Тогда

			Для Каждого СтрокаИнгредиент Из Объект.СоставИнгредиентов Цикл
				СтрокаИнгредиент.ЦенаИнгредиента = ПредопределенноеЗначение("Справочник.ЦеныНаИнгредиенты.ПустаяСсылка");
				СтрокаИнгредиент.СтоимостьЕдиницы = 0;
				СтрокаИнгредиент.СуммаСтоимости = 0;
			КонецЦикла;

			ОбновитьСебестоимостьПорцииНаСервере();
			Сообщить("Все цены очищены");

		КонецЕсли;

	Иначе
		Сообщить("Нет ингредиентов для очистки");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КопироватьЦеныИзДругойТехкарточки(Команда)

	// Копирование цен из другой техкарточки
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);

	ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьЦеныИзДругойТехкарточкиЗавершение", ЭтотОбъект);

	ОткрытьФорму("Справочник.Техкарточки.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсториюЦенИнгредиента(Команда)

	// Показать историю изменения цен выбранного ингредиента
	ТекущаяСтрока = Элементы.СоставИнгредиентов.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЦенаИнгредиента) Тогда
		Сообщить("Выберите строку с заполненной ценой ингредиента");
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущаяСтрока.ЦенаИнгредиента);

	ОткрытьФорму("Справочник.ЦеныНаИнгредиенты.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПищевуюЦенность(Команда)

	// Рассчет пищевой ценности блюда на основе состава ингредиентов
	Если Объект.СоставИнгредиентов.Количество() = 0 Тогда
		Сообщить("Для расчета пищевой ценности необходимо заполнить состав ингредиентов");
		Возврат;
	КонецЕсли;

	РассчитатьПищевуюЦенностьНаСервере();
	Сообщить("Пищевая ценность рассчитана");

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСебестоимость(Команда)

	// Принудительный пересчет себестоимости с обновлением всех цен
	Если Объект.СоставИнгредиентов.Количество() = 0 Тогда
		Сообщить("Для расчета себестоимости необходимо заполнить состав ингредиентов");
		Возврат;
	КонецЕсли;

	ПересчитатьСебестоимостьНаСервере();
	Сообщить("Себестоимость пересчитана");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииСервера

&НаСервере
Функция ПолучитьЦенуИнгредиентаНаСервере(Ингредиент, ЦенаИнгредиента)

	// Серверный вызов для получения цены ингредиента
	Возврат РасчетСебестоимостиМодуль.ПолучитьЦенуИнгредиентаДляФормы(Ингредиент, ЦенаИнгредиента);

КонецФункции

&НаСервере
Процедура ОбновитьСебестоимостьПорцииНаСервере()

	// Полный пересчет себестоимости порции
	РасчетСебестоимостиМодуль.ОбновитьЦеныВТехКарточке(Объект);

КонецПроцедуры

&НаСервере
Функция АвтозаполнениеЦенИнгредиентовНаСервере()

	КоличествоОбновленных = 0;

	// Проходим по всем ингредиентам и ищем активные цены
	Для Каждого СтрокаИнгредиент Из Объект.СоставИнгредиентов Цикл

		Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И НЕ ЗначениеЗаполнено(СтрокаИнгредиент.ЦенаИнгредиента) Тогда

			// Ищем активную цену для ингредиента
			АктивнаяЦена = НайтиАктивнуюЦенуДляИнгредиента(СтрокаИнгредиент.Ингредиент);

			Если ЗначениеЗаполнено(АктивнаяЦена) Тогда
				СтрокаИнгредиент.ЦенаИнгредиента = АктивнаяЦена;
				КоличествоОбновленных = КоличествоОбновленных + 1;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// Если что-то заполнили - пересчитываем себестоимость
	Если КоличествоОбновленных > 0 Тогда
		РасчетСебестоимостиМодуль.ОбновитьЦеныВТехКарточке(Объект);
	КонецЕсли;

	Возврат КоличествоОбновленных;

КонецФункции

&НаСервере
Функция НайтиАктивнуюЦенуДляИнгредиента(Ингредиент)

	// Поиск самой актуальной активной цены для ингредиента
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНаИнгредиенты.Ссылка КАК ЦенаСсылка
	|ИЗ
	|	Справочник.ЦеныНаИнгредиенты КАК ЦеныНаИнгредиенты
	|ГДЕ
	|	ЦеныНаИнгредиенты.Ингредиент = &Ингредиент
	|	И ЦеныНаИнгредиенты.Активность = ИСТИНА
	|	И НЕ ЦеныНаИнгредиенты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныНаИнгредиенты.ДатаУстановкиЦены УБЫВ";

	Запрос.УстановитьПараметр("Ингредиент", Ингредиент);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.ЦеныНаИнгредиенты.ПустаяСсылка();
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	Возврат Выборка.ЦенаСсылка;

КонецФункции

&НаСервере
Функция КопироватьЦеныИзТехкарточкиНаСервере(ТехкарточкаИсточник)

	КоличествоСкопированных = 0;

	Если НЕ ЗначениеЗаполнено(ТехкарточкаИсточник) Тогда
		Возврат КоличествоСкопированных;
	КонецЕсли;

	// Получаем состав ингредиентов источника
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТехкарточкиСоставИнгредиентов.Ингредиент КАК Ингредиент,
	|	ТехкарточкиСоставИнгредиентов.ЦенаИнгредиента КАК ЦенаИнгредиента
	|ИЗ
	|	Справочник.Техкарточки.СоставИнгредиентов КАК ТехкарточкиСоставИнгредиентов
	|ГДЕ
	|	ТехкарточкиСоставИнгредиентов.Ссылка = &ТехкарточкаИсточник
	|	И ЗначениеЗаполнено(ТехкарточкиСоставИнгредиентов.ЦенаИнгредиента)";

	Запрос.УстановитьПараметр("ТехкарточкаИсточник", ТехкарточкаИсточник);

	Выборка = Запрос.Выполнить().Выбрать();

	// Копируем цены для соответствующих ингредиентов
	Пока Выборка.Следующий() Цикл

		Для Каждого СтрокаИнгредиент Из Объект.СоставИнгредиентов Цикл

			Если СтрокаИнгредиент.Ингредиент = Выборка.Ингредиент И НЕ ЗначениеЗаполнено(СтрокаИнгредиент.ЦенаИнгредиента) Тогда
				СтрокаИнгредиент.ЦенаИнгредиента = Выборка.ЦенаИнгредиента;
				КоличествоСкопированных = КоличествоСкопированных + 1;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	// Пересчитываем себестоимость
	Если КоличествоСкопированных > 0 Тогда
		РасчетСебестоимостиМодуль.ОбновитьЦеныВТехКарточке(Объект);
	КонецЕсли;

	Возврат КоличествоСкопированных;

КонецФункции

&НаСервере
Процедура РассчитатьПищевуюЦенностьНаСервере()

	// Расчет пищевой ценности блюда на основе ингредиентов из справочника
	ОбщаяКалорийность = 0;
	ОбщиеБелки = 0;
	ОбщиеЖиры = 0;
	ОбщиеУглеводы = 0;

	// Проходим по всем ингредиентам и рассчитываем пищевую ценность
	Для Каждого СтрокаИнгредиент Из Объект.СоставИнгредиентов Цикл

		Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И СтрокаИнгредиент.НормаНетто > 0 Тогда

			// Получаем пищевую ценность ингредиента из справочника
			ПищевыеДанные = ПолучитьПищевуюЦенностьИнгредиента(СтрокаИнгредиент.Ингредиент);

			Если ПищевыеДанные <> Неопределено Тогда
				// Рассчитываем пищевую ценность для конкретного количества ингредиента
				// НормаНетто в граммах, пищевая ценность на 100г
				КоэффициентВеса = СтрокаИнгредиент.НормаНетто / 100;

				// Рассчитываем и записываем в строку табличной части
				СтрокаИнгредиент.Калорийность = ПищевыеДанные.Калории * КоэффициентВеса;
				СтрокаИнгредиент.Белки = ПищевыеДанные.Белки * КоэффициентВеса;
				СтрокаИнгредиент.Жиры = ПищевыеДанные.Жиры * КоэффициентВеса;
				СтрокаИнгредиент.Углеводы = ПищевыеДанные.Углеводы * КоэффициентВеса;

				// Суммируем к общим значениям
				ОбщаяКалорийность = ОбщаяКалорийность + СтрокаИнгредиент.Калорийность;
				ОбщиеБелки = ОбщиеБелки + СтрокаИнгредиент.Белки;
				ОбщиеЖиры = ОбщиеЖиры + СтрокаИнгредиент.Жиры;
				ОбщиеУглеводы = ОбщиеУглеводы + СтрокаИнгредиент.Углеводы;
			Иначе
				// Если данные не найдены - обнуляем строку
				СтрокаИнгредиент.Калорийность = 0;
				СтрокаИнгредиент.Белки = 0;
				СтрокаИнгредиент.Жиры = 0;
				СтрокаИнгредиент.Углеводы = 0;
			КонецЕсли;

		Иначе
			// Если ингредиент не выбран или норма нулевая - обнуляем строку
			СтрокаИнгредиент.Калорийность = 0;
			СтрокаИнгредиент.Белки = 0;
			СтрокаИнгредиент.Жиры = 0;
			СтрокаИнгредиент.Углеводы = 0;
		КонецЕсли;

	КонецЦикла;

	// Записываем итоговые результаты в поля техкарточки
	Объект.КалорийностьПорции = ОбщаяКалорийность;
	Объект.Белки = ОбщиеБелки;
	Объект.Жиры = ОбщиеЖиры;
	Объект.Углеводы = ОбщиеУглеводы;

КонецПроцедуры

&НаСервере
Функция ПолучитьПищевуюЦенностьИнгредиента(Ингредиент)

	// Получаем пищевую ценность ингредиента из отдельного справочника
	Если НЕ ЗначениеЗаполнено(Ингредиент) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ПищевыеДанные = Новый Структура;
	ПищевыеДанные.Вставить("Калории", 0);
	ПищевыеДанные.Вставить("Белки", 0);
	ПищевыеДанные.Вставить("Жиры", 0);
	ПищевыеДанные.Вставить("Углеводы", 0);

	// Запрос для получения пищевой ценности из справочника ПищеваяЦенностьИнгредиентов
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ПищеваяЦенность.Калорийность, 0) КАК Калории,
	|	ЕСТЬNULL(ПищеваяЦенность.Белки, 0) КАК Белки,
	|	ЕСТЬNULL(ПищеваяЦенность.Жиры, 0) КАК Жиры,
	|	ЕСТЬNULL(ПищеваяЦенность.Углеводы, 0) КАК Углеводы
	|ИЗ
	|	Справочник.ПищеваяЦенностьИнгредиентов КАК ПищеваяЦенность
	|ГДЕ
	|	ПищеваяЦенность.Ингредиент = &Ингредиент
	|	И НЕ ПищеваяЦенность.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПищеваяЦенность.Код УБЫВ";

	Запрос.УстановитьПараметр("Ингредиент", Ингредиент);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		ПищевыеДанные.Калории = Выборка.Калории;
		ПищевыеДанные.Белки = Выборка.Белки;
		ПищевыеДанные.Жиры = Выборка.Жиры;
		ПищевыеДанные.Углеводы = Выборка.Углеводы;
	КонецЕсли;

	Возврат ПищевыеДанные;

КонецФункции

&НаСервере
Процедура ПересчитатьСебестоимостьНаСервере()

	// Принудительный пересчет себестоимости с обновлением всех данных
	// Сначала обновляем цены ингредиентов из справочника
	Для Каждого СтрокаИнгредиент Из Объект.СоставИнгредиентов Цикл

		Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И ЗначениеЗаполнено(СтрокаИнгредиент.ЦенаИнгредиента) Тогда

			// Обновляем стоимость единицы
			НоваяЦена = РасчетСебестоимостиМодуль.ПолучитьЦенуИнгредиентаДляФормы(СтрокаИнгредиент.Ингредиент, СтрокаИнгредиент.ЦенаИнгредиента);
			СтрокаИнгредиент.СтоимостьЕдиницы = НоваяЦена;

			// Пересчитываем сумму стоимости
			Если СтрокаИнгредиент.НормаБрутто > 0 И СтрокаИнгредиент.СтоимостьЕдиницы > 0 Тогда
				СтрокаИнгредиент.СуммаСтоимости = (СтрокаИнгредиент.НормаБрутто / 1000) * СтрокаИнгредиент.СтоимостьЕдиницы;
			Иначе
				СтрокаИнгредиент.СуммаСтоимости = 0;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	// Полный пересчет себестоимости порции
	РасчетСебестоимостиМодуль.ОбновитьЦеныВТехКарточке(Объект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииКлиента

&НаКлиенте
Процедура РассчитатьСтоимостьИнгредиентаВСтроке(СтрокаИнгредиент)

	// Рассчитываем стоимость ингредиента в строке рецепта
	Если СтрокаИнгредиент.НормаБрутто > 0 И СтрокаИнгредиент.СтоимостьЕдиницы > 0 Тогда
		// НормаБрутто в граммах, СтоимостьЕдиницы за килограмм
		СтрокаИнгредиент.СуммаСтоимости = (СтрокаИнгредиент.НормаБрутто / 1000) * СтрокаИнгредиент.СтоимостьЕдиницы;
	Иначе
		СтрокаИнгредиент.СуммаСтоимости = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиЗаполнитьЦенуСтроки(СтрокаИнгредиент)

	// Попытка автоматически найти цену для ингредиента
	Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И НЕ ЗначениеЗаполнено(СтрокаИнгредиент.ЦенаИнгредиента) Тогда

		АктивнаяЦена = НайтиАктивнуюЦенуДляИнгредиентаНаСервере(СтрокаИнгредиент.Ингредиент);

		Если ЗначениеЗаполнено(АктивнаяЦена) Тогда
			СтрокаИнгредиент.ЦенаИнгредиента = АктивнаяЦена;

			// Получаем цену и пересчитываем
			ЦенаЗаКг = ПолучитьЦенуИнгредиентаНаСервере(СтрокаИнгредиент.Ингредиент, АктивнаяЦена);
			СтрокаИнгредиент.СтоимостьЕдиницы = ЦенаЗаКг;
			РассчитатьСтоимостьИнгредиентаВСтроке(СтрокаИнгредиент);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеЭлементовФормы()

	// Настройка видимости и доступности элементов формы
	Элементы.СоставИнгредиентовСтоимостьЕдиницы.ТолькоПросмотр = Истина;
	Элементы.СоставИнгредиентовСуммаСтоимости.ТолькоПросмотр = Истина;

КонецПроцедуры

&НаСервере
Функция НайтиАктивнуюЦенуДляИнгредиентаНаСервере(Ингредиент)

	// Серверный вызов для поиска активной цены
	Возврат НайтиАктивнуюЦенуДляИнгредиента(Ингредиент);

КонецФункции

&НаКлиенте
Процедура КопироватьЦеныИзДругойТехкарточкиЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ВыбранноеЗначение <> Объект.Ссылка Тогда

		КоличествоСкопированных = КопироватьЦеныИзТехкарточкиНаСервере(ВыбранноеЗначение);

		Если КоличествоСкопированных > 0 Тогда
			Сообщить(СтрШаблон("Скопировано цен: %1", КоличествоСкопированных));
		Иначе
			Сообщить("Подходящих цен для копирования не найдено");
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти