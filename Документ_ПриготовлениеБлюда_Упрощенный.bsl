// Упрощенный документ "Приготовление блюда"

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

    // Простая обработка проведения без сложной логики
    Сообщить("=== НАЧАЛО ПРОВЕДЕНИЯ ДОКУМЕНТА ===");

    Если ПриготавливаемыеБлюда.Количество() = 0 Тогда
        Сообщить("ОШИБКА: Не заполнен список приготавливаемых блюд");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверяем заполненность данных
    НомерСтрокиБлюда = 0;
    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
        НомерСтрокиБлюда = НомерСтрокиБлюда + 1;

        Если НЕ ЗначениеЗаполнено(СтрокаБлюда.Блюдо) Тогда
            Сообщить("ОШИБКА: Не заполнено блюдо в строке " + Формат(НомерСтрокиБлюда, "ЧГ=0"));
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        Если СтрокаБлюда.КоличествоПорций <= 0 Тогда
            Сообщить("ОШИБКА: Не заполнено количество порций для блюда " + Строка(СтрокаБлюда.Блюдо));
            Отказ = Истина;
            Возврат;
        КонецЕсли;
    КонецЦикла;

    // Проверяем наличие складов
    Если НЕ ЗначениеЗаполнено(СкладСырья) Тогда
        Сообщить("ОШИБКА: Не заполнен склад сырья");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(СкладГотовойПродукции) Тогда
        Сообщить("ОШИБКА: Не заполнен склад готовой продукции");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверка наличия ингредиентов на складе
    ПроверитьНаличиеИнгредиентовНаСкладе(Отказ);
    Если Отказ Тогда
        Возврат;
    КонецЕсли;

    // Упрощенная обработка проведения без движений по регистрам
    // Просто выводим информацию о том, что будет списано/оприходовано

    // Списываем ингредиенты и оприходуем готовые блюда
    // ВАЖНО: создаем один набор записей для всех движений документа
    ЗаписатьДвиженияПоРегистру(Отказ);

КонецПроцедуры

Процедура ОбработкаОтменыПроведения(Отказ)

    // Отменяем движения - пробуем разные варианты названий регистра
    Попытка
        Движения.РегистрТоварыНаСкладах.Записывать = Истина;
        Движения.РегистрТоварыНаСкладах.Очистить();
    Исключение
        Попытка
            Движения.ТоварыНаСкладах.Записывать = Истина;
            Движения.ТоварыНаСкладах.Очистить();
        Исключение
            Попытка
                Движения.ОстаткиТоваров.Записывать = Истина;
                Движения.ОстаткиТоваров.Очистить();
            Исключение
                Сообщить("ПРЕДУПРЕЖДЕНИЕ: Не удалось найти регистр для отмены движений");
            КонецПопытки;
        КонецПопытки;
    КонецПопытки;

КонецПроцедуры

Процедура ПроверитьНаличиеИнгредиентовНаСкладе(Отказ)

    ТаблицаНехваток = Новый ТаблицаЗначений;
    ТаблицаНехваток.Колонки.Добавить("Ингредиент");
    ТаблицаНехваток.Колонки.Добавить("НеобходимоеКоличество", Новый ОписаниеТипов("Число"));
    ТаблицаНехваток.Колонки.Добавить("ФактическийОстаток", Новый ОписаниеТипов("Число"));
    ТаблицаНехваток.Колонки.Добавить("Нехватка", Новый ОписаниеТипов("Число"));

    // Собираем все необходимые ингредиенты
    ОбщийСписокИнгредиентов = Новый ТаблицаЗначений;
    ОбщийСписокИнгредиентов.Колонки.Добавить("Ингредиент");
    ОбщийСписокИнгредиентов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
            СоставИнгредиентов = ПолучитьСоставИнгредиентовИзТехкарточки(СтрокаБлюда.Блюдо, СтрокаБлюда.КоличествоПорций);

            Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
                НайденнаяСтрока = ОбщийСписокИнгредиентов.Найти(СтрокаИнгредиент.Ингредиент, "Ингредиент");
                Если НайденнаяСтрока = Неопределено Тогда
                    НоваяСтрока = ОбщийСписокИнгредиентов.Добавить();
                    НоваяСтрока.Ингредиент = СтрокаИнгредиент.Ингредиент;
                    НоваяСтрока.Количество = СтрокаИнгредиент.ОбщееКоличество;
                Иначе
                    НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + СтрокаИнгредиент.ОбщееКоличество;
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;

    // Проверяем остатки на складе для каждого ингредиента
    Для Каждого СтрокаИнгредиент Из ОбщийСписокИнгредиентов Цикл
        ТекущийОстаток = ПолучитьОстатокИнгредиентаНаСкладе(СтрокаИнгредиент.Ингредиент, СкладСырья);

        Если ТекущийОстаток < СтрокаИнгредиент.Количество Тогда
            НоваяСтрока = ТаблицаНехваток.Добавить();
            НоваяСтрока.Ингредиент = СтрокаИнгредиент.Ингредиент;
            НоваяСтрока.НеобходимоеКоличество = СтрокаИнгредиент.Количество;
            НоваяСтрока.ФактическийОстаток = ТекущийОстаток;
            НоваяСтрока.Нехватка = СтрокаИнгредиент.Количество - ТекущийОстаток;
        КонецЕсли;
    КонецЦикла;

    // Если есть нехватки, выводим отчет и блокируем проведение
    Если ТаблицаНехваток.Количество() > 0 Тогда
        ДокументОтчет = Новый ТабличныйДокумент;

        // Заголовок
        ДокументОтчет.Область(1,1,1,4).Объединить();
        ДокументОтчет.Область(1,1).Текст = "НЕДОСТАТОЧНО ИНГРЕДИЕНТОВ НА СКЛАДЕ";
        ДокументОтчет.Область(1,1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
        ДокументОтчет.Область(1,1).Шрифт = Новый Шрифт(,12,Истина);

        // Шапка таблицы
        ДокументОтчет.Область(3,1).Текст = "Ингредиент";
        ДокументОтчет.Область(3,2).Текст = "Необходимо (кг)";
        ДокументОтчет.Область(3,3).Текст = "На складе (кг)";
        ДокументОтчет.Область(3,4).Текст = "Нехватка (кг)";
        ДокументОтчет.Область(3,1,3,4).Шрифт = Новый Шрифт(,,Истина);

        // Данные
        НомерСтроки = 4;
        Для Каждого СтрокаНехватки Из ТаблицаНехваток Цикл
            ДокументОтчет.Область(НомерСтроки,1).Текст = Строка(СтрокаНехватки.Ингредиент);
            ДокументОтчет.Область(НомерСтроки,2).Текст = Формат(СтрокаНехватки.НеобходимоеКоличество, "ЧДЦ=3");
            ДокументОтчет.Область(НомерСтроки,3).Текст = Формат(СтрокаНехватки.ФактическийОстаток, "ЧДЦ=3");
            ДокументОтчет.Область(НомерСтроки,4).Текст = Формат(СтрокаНехватки.Нехватка, "ЧДЦ=3");
            НомерСтроки = НомерСтроки + 1;
        КонецЦикла;

        Сообщить("ОШИБКА: " + ДокументОтчет.Область(1,1,1,1).Текст);
        Отказ = Истина;
    КонецЕсли;

КонецПроцедуры

Функция ПолучитьОстатокИнгредиентаНаСкладе(Ингредиент, Склад)

    Если НЕ ЗначениеЗаполнено(Ингредиент) ИЛИ НЕ ЗначениеЗаполнено(Склад) Тогда
        Возврат 0;
    КонецЕсли;

    Попытка
        Запрос = Новый Запрос;
        // Пробуем разные варианты регистров для УТ
        МассивВариантов = Новый Массив;
        МассивВариантов.Добавить("ТоварыНаСкладах");
        МассивВариантов.Добавить("ОстаткиТоваров");
        
        МассивВариантов.Добавить("ТоварныеЗапасы");
        МассивВариантов.Добавить("Запасы");

        ТекстЗапроса = "";
        Для Каждого Вариант Из МассивВариантов Цикл
            Попытка
                Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ РегистрНакопления." + Вариант;
                Запрос.Выполнить();
                // Если дошли сюда - регистр существует
                ТекстЗапроса =
                "ВЫБРАТЬ
                |    СУММА(ЕСТЬNULL(" + Вариант + "Остатки.ВНаличииОстаток, 0)) КАК Остаток
                |ИЗ
                |    РегистрНакопления." + Вариант + ".Остатки(&НаДату, Номенклатура = &Номенклатура И Склад = &Склад) КАК " + Вариант + "Остатки";
                Прервать;
            Исключение
                Продолжить;
            КонецПопытки;
        КонецЦикла;

        Если ПустаяСтрока(ТекстЗапроса) Тогда
            ВызватьИсключение("Не найден подходящий регистр накопления для остатков товаров");
        КонецЕсли;

        Запрос.Текст = ТекстЗапроса;

        Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
        Запрос.УстановитьПараметр("Номенклатура", Ингредиент);
        Запрос.УстановитьПараметр("Склад", Склад);

        Результат = Запрос.Выполнить();
        Если НЕ Результат.Пустой() Тогда
            Выборка = Результат.Выбрать();
            Выборка.Следующий();
            Возврат Выборка.Остаток;
        КонецЕсли;
    Исключение
        Сообщить("Ошибка при запросе остатков: " + ОписаниеОшибки());
    КонецПопытки;

    Возврат 0;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиИмяРегистраНакопления()

    // Ищем доступный регистр накопления, который используется для документа
    МассивВариантов = Новый Массив;
    МассивВариантов.Добавить("ТоварыНаСкладах");
    МассивВариантов.Добавить("ОстаткиТоваров");
        МассивВариантов.Добавить("ТоварныеЗапасы");
    МассивВариантов.Добавить("Запасы");

    Для Каждого Вариант Из МассивВариантов Цикл
        Попытка
            // Проверяем существование регистра через метаданные
            Тест = Метаданные.РегистрыНакопления.Найти(Вариант);
            Если Тест <> Неопределено Тогда
                Возврат Вариант;
            КонецЕсли;
        Исключение
            Продолжить;
        КонецПопытки;
    КонецЦикла;

    Возврат "";

КонецФункции

Функция ПолучитьТехкарточкуДляБлюда(ГотовоеБлюдо)

    Если НЕ ЗначениеЗаполнено(ГотовоеБлюдо) Тогда
        Возврат Справочники.Техкарточки.ПустаяСсылка();
    КонецЕсли;

    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    Техкарточки.Ссылка КАК Техкарточка
        |ИЗ
        |    Справочник.Техкарточки КАК Техкарточки
        |ГДЕ
        |    Техкарточки.ГотовоеБлюдо = &ГотовоеБлюдо
        |    И НЕ Техкарточки.ПометкаУдаления";

        Запрос.УстановитьПараметр("ГотовоеБлюдо", ГотовоеБлюдо);

        Результат = Запрос.Выполнить();
        Если НЕ Результат.Пустой() Тогда
            Выборка = Результат.Выбрать();
            Выборка.Следующий();
            Возврат Выборка.Техкарточка;
        КонецЕсли;
    Исключение
        // Ошибка при запросе
    КонецПопытки;

    Возврат Справочники.Техкарточки.ПустаяСсылка();

КонецФункции

Функция ПолучитьСоставИнгредиентовИзТехкарточки(ГотовоеБлюдо, КоличествоПорций = 1)

    Техкарточка = ПолучитьТехкарточкуДляБлюда(ГотовоеБлюдо);
    СоставИнгредиентов = Новый ТаблицаЗначений;
    СоставИнгредиентов.Колонки.Добавить("Ингредиент");
    СоставИнгредиентов.Колонки.Добавить("КоличествоНаПорцию", Новый ОписаниеТипов("Число"));
    СоставИнгредиентов.Колонки.Добавить("ОбщееКоличество", Новый ОписаниеТипов("Число"));

    Если ЗначениеЗаполнено(Техкарточка) Тогда
        Попытка
            Для Каждого СтрокаИнгредиент Из Техкарточка.СоставИнгредиентов Цикл
                Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И СтрокаИнгредиент.НормаБрутто > 0 Тогда
                    НоваяСтрока = СоставИнгредиентов.Добавить();
                    НоваяСтрока.Ингредиент = СтрокаИнгредиент.Ингредиент;
                    НоваяСтрока.КоличествоНаПорцию = СтрокаИнгредиент.НормаБрутто / 1000; // Переводим граммы в килограммы
                    НоваяСтрока.ОбщееКоличество = НоваяСтрока.КоличествоНаПорцию * КоличествоПорций;
                КонецЕсли;
            КонецЦикла;
        Исключение
            // Ошибка при получении состава ингредиентов
        КонецПопытки;
    КонецЕсли;

    Возврат СоставИнгредиентов;

КонецФункции

Процедура ЗаписатьДвиженияПоРегистру(Отказ)

    Сообщить(">>> ЗАПИСЬ ВСЕХ ДВИЖЕНИЙ ДОКУМЕНТА В ОДИН НАБОР <<<");

    // Собираем все ингредиенты для списания
    ТаблицаСписания = Новый ТаблицаЗначений;
    ТаблицаСписания.Колонки.Добавить("Ингредиент");
    ТаблицаСписания.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
            СоставИнгредиентов = ПолучитьСоставИнгредиентовИзТехкарточки(СтрокаБлюда.Блюдо, СтрокаБлюда.КоличествоПорций);

            Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
                Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И СтрокаИнгредиент.ОбщееКоличество > 0 Тогда
                    НайденнаяСтрока = ТаблицаСписания.Найти(СтрокаИнгредиент.Ингредиент, "Ингредиент");
                    Если НайденнаяСтрока = Неопределено Тогда
                        НоваяСтрока = ТаблицаСписания.Добавить();
                        НоваяСтрока.Ингредиент = СтрокаИнгредиент.Ингредиент;
                        НоваяСтрока.Количество = СтрокаИнгредиент.ОбщееКоличество;
                    Иначе
                        НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + СтрокаИнгредиент.ОбщееКоличество;
                    КонецЕсли;
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;

    Сообщить("Собрано ингредиентов для списания: " + Формат(ТаблицаСписания.Количество(), "ЧГ=0"));
    Сообщить("Готовых блюд для оприходования: " + Формат(ПриготавливаемыеБлюда.Количество(), "ЧГ=0"));

    // ВАЖНО: Определяем какой регистр РЕАЛЬНО используется для остатков
    Сообщить(">>> ОПРЕДЕЛЯЕМ РЕГИСТР ДЛЯ ЗАПИСИ <<<");
    ИмяРегистраДляЗаписи = НайтиИмяРегистраНакопления();
    Сообщить("Найденный регистр для записи: " + ИмяРегистраДляЗаписи);

    // Получаем организацию для всех записей
    ОрганизацияДляЗаписи = Неопределено;
    Попытка
        ОрганизацияДляЗаписи = Справочники.Организации.ОсновнаяОрганизация;
    Исключение
        Попытка
            Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Организации");
            Результат = Запрос.Выполнить();
            Если НЕ Результат.Пустой() Тогда
                Выборка = Результат.Выбрать();
                Выборка.Следующий();
                ОрганизацияДляЗаписи = Выборка.Ссылка;
            КонецЕсли;
        Исключение
        КонецПопытки;
    КонецПопытки;

    Если ЗначениеЗаполнено(ОрганизацияДляЗаписи) Тогда
        Сообщить("Используется организация: " + Строка(ОрганизацияДляЗаписи));
    Иначе
        Сообщить("ВНИМАНИЕ: Организация не найдена!");
    КонецЕсли;

    Если ПустаяСтрока(ИмяРегистраДляЗаписи) Тогда
        Сообщить("ОШИБКА: Регистр для записи не найден!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Попытка
        // Создаем ОДИН набор записей для ВСЕХ движений документа
        НаборЗаписей = РегистрыНакопления[ИмяРегистраДляЗаписи].СоздатьНаборЗаписей();
        Сообщить("Набор записей создан для регистра: " + ИмяРегистраДляЗаписи);
        НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);

        // 1. Добавляем все записи РАСХОДА (списание ингредиентов)
        Сообщить("=== СПИСАНИЕ ИНГРЕДИЕНТОВ ===");

        // ОТЛАДКА: Проверяем успешность записи движений
        // Пробуем прочитать записи сразу после записи
        Сообщить("ОТЛАДКА: Проверяем записанные движения...");

        Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
            НоваяЗапись = НаборЗаписей.Добавить();
            НоваяЗапись.Период = Дата;
            НоваяЗапись.Регистратор = Ссылка;
            НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
            НоваяЗапись.Номенклатура = СтрокаСписания.Ингредиент;
            НоваяЗапись.Склад = СкладСырья;

            // Заполняем организацию если она найдена
            Попытка
                Если ЗначениеЗаполнено(ОрганизацияДляЗаписи) Тогда
                    НоваяЗапись.Организация = ОрганизацияДляЗаписи;
                КонецЕсли;
            Исключение
            КонецПопытки;

            // Устанавливаем количество в поле ВНаличии
            НоваяЗапись.ВНаличии = СтрокаСписания.Количество;

            Сообщить("РАСХОД: " + Строка(СтрокаСписания.Ингредиент) + " - " + Формат(СтрокаСписания.Количество, "ЧДЦ=3") + " кг");
        КонецЦикла;

        // 2. Добавляем все записи ПРИХОДА (оприходование готовых блюд)
        Сообщить("=== ОПРИХОДОВАНИЕ ГОТОВЫХ БЛЮД ===");
        Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
            Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
                НоваяЗапись = НаборЗаписей.Добавить();
                НоваяЗапись.Период = Дата;
                НоваяЗапись.Регистратор = Ссылка;
                НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
                НоваяЗапись.Номенклатура = СтрокаБлюда.Блюдо;
                НоваяЗапись.Склад = СкладГотовойПродукции;

                // Заполняем организацию если она найдена
                Попытка
                    Если ЗначениеЗаполнено(ОрганизацияДляЗаписи) Тогда
                        НоваяЗапись.Организация = ОрганизацияДляЗаписи;
                    КонецЕсли;
                Исключение
                КонецПопытки;

                // Устанавливаем количество в поле ВНаличии
                НоваяЗапись.ВНаличии = СтрокаБлюда.КоличествоПорций;

                Сообщить("ПРИХОД: " + Строка(СтрокаБлюда.Блюдо) + " - " + Формат(СтрокаБлюда.КоличествоПорций, "ЧГ=0") + " порций");
            КонецЕсли;
        КонецЦикла;

        // 3. Записываем ВСЕ движения одной операцией
        Сообщить("Всего движений в наборе: " + Формат(НаборЗаписей.Количество(), "ЧГ=0"));
        НаборЗаписей.Записать();
        Сообщить("НаборЗаписей.Записать() выполнен");

        // Проверяем статус документа
        Сообщить("Статус документа - Проведен: " + ?(Проведен, "ДА", "НЕТ"));

        // ПРОВЕРКА: Читаем записи из регистра чтобы убедиться что они там есть
        Попытка
            ЗапросПроверки = Новый Запрос;
            ТекстЗапросаПроверки = "ВЫБРАТЬ ПЕРВЫЕ 3 * ИЗ РегистрНакопления." + ИмяРегистраДляЗаписи + " ГДЕ Регистратор = &Регистратор";
            ЗапросПроверки.Текст = ТекстЗапросаПроверки;

            ЗапросПроверки.УстановитьПараметр("Регистратор", Ссылка);
            РезультатПроверки = ЗапросПроверки.Выполнить();

            Сообщить("ПРОВЕРКА: В регистре найдено записей: " + Формат(РезультатПроверки.Выгрузить().Количество(), "ЧГ=0"));

            Если НЕ РезультатПроверки.Пустой() Тогда
                Сообщить("ПРОВЕРКА: Первые 3 записи из регистра:");
                ВыборкаПроверки = РезультатПроверки.Выбрать();
                Счетчик = 0;
                Пока ВыборкаПроверки.Следующий() И Счетчик < 3 Цикл
                    Счетчик = Счетчик + 1;
                    Сообщить("  Запись " + Формат(Счетчик, "ЧГ=0") + ":");
                    Сообщить("    Номенклатура: " + Строка(ВыборкаПроверки.Номенклатура));
                    Сообщить("    Склад: " + Строка(ВыборкаПроверки.Склад));
                    Сообщить("    ВидДвижения: " + Строка(ВыборкаПроверки.ВидДвижения));

                    // Пробуем вывести поле ВНаличии
                    Попытка
                        Сообщить("    ВНаличии: " + Формат(ВыборкаПроверки.ВНаличии, "ЧДЦ=3"));
                    Исключение
                        Сообщить("    ВНаличии: поля нет или не заполнено");
                    КонецПопытки;
                КонецЦикла;
            КонецЕсли;
        Исключение
            Сообщить("ОШИБКА проверки записей в регистре: " + ОписаниеОшибки());
        КонецПопытки;

        Сообщить("=== ВСЕ ДВИЖЕНИЯ УСПЕШНО ЗАПИСАНЫ ===");

    Исключение
        Сообщить("ОШИБКА при записи движений: " + ОписаниеОшибки());
        Отказ = Истина;
    КонецПопытки;

КонецПроцедуры

Процедура СписатьИнгредиентыПоТехкарточкам(Отказ)

    Сообщить(">>> ВЫЗВАНА ПРОЦЕДУРА СписатьИнгредиентыПоТехкарточкам <<<");

    // Собираем все ингредиенты с группировкой
    ТаблицаСписания = Новый ТаблицаЗначений;
    ТаблицаСписания.Колонки.Добавить("Ингредиент");
    ТаблицаСписания.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
            СоставИнгредиентов = ПолучитьСоставИнгредиентовИзТехкарточки(СтрокаБлюда.Блюдо, СтрокаБлюда.КоличествоПорций);

            Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
                Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И СтрокаИнгредиент.ОбщееКоличество > 0 Тогда

                    // Ищем или добавляем строку
                    НайденнаяСтрока = ТаблицаСписания.Найти(СтрокаИнгредиент.Ингредиент, "Ингредиент");
                    Если НайденнаяСтрока = Неопределено Тогда
                        НоваяСтрока = ТаблицаСписания.Добавить();
                        НоваяСтрока.Ингредиент = СтрокаИнгредиент.Ингредиент;
                        НоваяСтрока.Количество = СтрокаИнгредиент.ОбщееКоличество;
                    Иначе
                        НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + СтрокаИнгредиент.ОбщееКоличество;
                    КонецЕсли;

                КонецЕсли;
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;

    // Записываем движения расхода напрямую через регистр
    Сообщить("=== СПИСАНИЕ ИНГРЕДИЕНТОВ ===");
    Сообщить("Всего ингредиентов для списания: " + Формат(ТаблицаСписания.Количество(), "ЧГ=0"));

    Если ТаблицаСписания.Количество() = 0 Тогда
        Сообщить("ВНИМАНИЕ: Таблица списания пустая, выход из процедуры");
        Возврат;
    КонецЕсли;

    Сообщить("Начинаем создание набора записей для регистра ТоварыНаСкладах...");

    Попытка
        // Создаем ОДИН набор записей для всех движений расхода
        НаборЗаписей = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
        Сообщить("Набор записей создан успешно");

        // Устанавливаем отбор по регистратору
        НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
        Сообщить("Отбор по регистратору установлен");

        // Добавляем все записи расхода
        Сообщить("Начинаем добавление записей расхода...");
        КоличествоДобавлено = 0;
        Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
            Попытка
                НоваяЗапись = НаборЗаписей.Добавить();
                НоваяЗапись.Период = Дата;
                НоваяЗапись.Регистратор = Ссылка;
                НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
                НоваяЗапись.Номенклатура = СтрокаСписания.Ингредиент;
                НоваяЗапись.Склад = СкладСырья;

                // Пробуем разные варианты поля количества
                УспешноУстановлено = Ложь;
                Попытка
                    НоваяЗапись.ВНаличии = СтрокаСписания.Количество;
                    УспешноУстановлено = Истина;
                Исключение
                    Попытка
                        НоваяЗапись.Количество = СтрокаСписания.Количество;
                        УспешноУстановлено = Истина;
                    Исключение
                        Попытка
                            НоваяЗапись.КоличествоВНаличии = СтрокаСписания.Количество;
                            УспешноУстановлено = Истина;
                        Исключение
                            Попытка
                                НоваяЗапись.КолМест = СтрокаСписания.Количество;
                                УспешноУстановлено = Истина;
                            Исключение
                                Попытка
                                    НоваяЗапись.КолВНаличии = СтрокаСписания.Количество;
                                    УспешноУстановлено = Истина;
                                Исключение
                                КонецПопытки;
                            КонецПопытки;
                        КонецПопытки;
                    КонецПопытки;
                КонецПопытки;

                Если УспешноУстановлено Тогда
                    КоличествоДобавлено = КоличествоДобавлено + 1;
                    Сообщить("СПИСАНИЕ: " + Строка(СтрокаСписания.Ингредиент) + " - " + Формат(СтрокаСписания.Количество, "ЧДЦ=3") + " кг");
                Иначе
                    Сообщить("ВНИМАНИЕ: Не удалось установить количество для " + Строка(СтрокаСписания.Ингредиент));
                КонецЕсли;
            Исключение
                Сообщить("ОШИБКА добавления записи для " + Строка(СтрокаСписания.Ингредиент) + ": " + ОписаниеОшибки());
            КонецПопытки;
        КонецЦикла;

        Сообщить("Добавлено записей расхода в набор: " + Формат(КоличествоДобавлено, "ЧГ=0"));
        Сообщить("Количество записей в наборе перед записью: " + Формат(НаборЗаписей.Количество(), "ЧГ=0"));

        // Записываем весь набор одной операцией
        Сообщить("Вызываем НаборЗаписей.Записать()...");
        НаборЗаписей.Записать();
        Сообщить("НаборЗаписей.Записать() выполнен успешно");

        Сообщить("=== СПИСАНИЕ ЗАВЕРШЕНО: Записано " + Формат(НаборЗаписей.Количество(), "ЧГ=0") + " записей ===");
    Исключение
        Сообщить("ОШИБКА при списании ингредиентов: " + ОписаниеОшибки());
        Отказ = Истина;
    КонецПопытки;

КонецПроцедуры

Процедура ОприходоватьГотовыеБлюда(Отказ)

    Сообщить("=== ОПРИХОДОВАНИЕ ГОТОВЫХ БЛЮД ===");

    Если ПриготавливаемыеБлюда.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;

    Попытка
        // Создаем ОДИН набор записей для всех движений прихода
        НаборЗаписей = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();

        // Устанавливаем отбор по регистратору
        НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);

        // Добавляем все записи прихода
        Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
            Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
                НоваяЗапись = НаборЗаписей.Добавить();
                НоваяЗапись.Период = Дата;
                НоваяЗапись.Регистратор = Ссылка;
                НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
                НоваяЗапись.Номенклатура = СтрокаБлюда.Блюдо;
                НоваяЗапись.Склад = СкладГотовойПродукции;

                // Пробуем разные варианты поля количества
                Попытка
                    НоваяЗапись.ВНаличии = СтрокаБлюда.КоличествоПорций;
                Исключение
                    Попытка
                        НоваяЗапись.Количество = СтрокаБлюда.КоличествоПорций;
                    Исключение
                        Попытка
                            НоваяЗапись.КоличествоВНаличии = СтрокаБлюда.КоличествоПорций;
                        Исключение
                            Попытка
                                НоваяЗапись.КолМест = СтрокаБлюда.КоличествоПорций;
                            Исключение
                                Попытка
                                    НоваяЗапись.КолВНаличии = СтрокаБлюда.КоличествоПорций;
                                Исключение
                                    ВызватьИсключение("Не удалось найти поле количества в регистре");
                                КонецПопытки;
                            КонецПопытки;
                        КонецПопытки;
                    КонецПопытки;
                КонецПопытки;

                Сообщить("ПРИХОД: " + Строка(СтрокаБлюда.Блюдо) + " - " + Формат(СтрокаБлюда.КоличествоПорций, "ЧГ=0") + " порций");
            КонецЕсли;
        КонецЦикла;

        // Записываем весь набор одной операцией
        НаборЗаписей.Записать();

        Сообщить("=== ОПРИХОДОВАНИЕ ЗАВЕРШЕНО: Записано " + Формат(НаборЗаписей.Количество(), "ЧГ=0") + " записей ===");
    Исключение
        Сообщить("ОШИБКА при оприходовании готовых блюд: " + ОписаниеОшибки());
        Отказ = Истина;
    КонецПопытки;

КонецПроцедуры

Процедура ВывестиОтчетОНехваткеИнгредиентов(ТаблицаНехваток)

    Сообщить("==================================================");
    Сообщить("          НЕДОСТАТОЧНО ИНГРЕДИЕНТОВ НА СКЛАДЕ");
    Сообщить("==================================================");
    Сообщить("");

    Для Каждого СтрокаНехватки Из ТаблицаНехваток Цикл
        ТекстСообщения = "НЕХВАТКА: " + Строка(СтрокаНехватки.Ингредиент) + " - Необходимо: " + Формат(СтрокаНехватки.НеобходимоеКоличество, "ЧДЦ=3") + " кг, На складе: " + Формат(СтрокаНехватки.ФактическийОстаток, "ЧДЦ=3") + " кг, Не хватает: " + Формат(СтрокаНехватки.Нехватка, "ЧДЦ=3") + " кг";
        Сообщить(ТекстСообщения);
    КонецЦикла;

    Сообщить("");
    Сообщить("==================================================");

КонецПроцедуры

Процедура ВывестиОтчетОСписанииИнгредиентов(ДокументОтчет)

    Сообщить("==================================================");
    Сообщить("              СПИСАНИЕ ИНГРЕДИЕНТОВ");
    Сообщить("==================================================");
    Сообщить("");

    // Простой вывод через сообщения
    Сообщить("Отчет о списании ингредиентов сформирован");
    Сообщить("Данные отчета сохранены в табличном документе");

    Сообщить("");
    Сообщить("==================================================");

КонецПроцедуры

#КонецОбласти