// Упрощенный документ "Приготовление блюда"

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

    // Простая обработка проведения без сложной логики
    Если ПриготавливаемыеБлюда.Количество() = 0 Тогда
        Сообщить("Не заполнен список приготавливаемых блюд");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверяем заполненность данных
    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
        Если НЕ ЗначениеЗаполнено(СтрокаБлюда.Блюдо) Тогда
            Сообщить("Не заполнено блюдо в строке " + ПриготавливаемыеБлюда.Индекс(СтрокаБлюда) + 1);
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        Если СтрокаБлюда.КоличествоПорций <= 0 Тогда
            Сообщить("Не заполнено количество порций для блюда " + СтрокаБлюда.Блюдо);
            Отказ = Истина;
            Возврат;
        КонецЕсли;
    КонецЦикла;

    // Проверяем наличие складов
    Если НЕ ЗначениеЗаполнено(СкладСырья) Тогда
        Сообщить("Не заполнен склад сырья");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(СкладГотовойПродукции) Тогда
        Сообщить("Не заполнен склад готовой продукции");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Упрощенная обработка проведения без движений по регистрам
    // Просто выводим информацию о том, что будет списано/оприходовано

    // Списываем ингредиенты и оприходуем готовые блюда
    СписатьИнгредиентыПоТехкарточкам(Отказ);

    Если НЕ Отказ Тогда
        ОприходоватьГотовыеБлюда(Отказ);
    КонецЕсли;

КонецПроцедуры

Процедура ОбработкаОтменыПроведения(Отказ)

    // Отменяем движения - пробуем разные варианты названий регистра
    Попытка
        Движения.РегистрТоварыНаСкладах.Записывать = Истина;
        Движения.РегистрТоварыНаСкладах.Очистить();
    Исключение
        Попытка
            Движения.ТоварыНаСкладах.Записывать = Истина;
            Движения.ТоварыНаСкладах.Очистить();
        Исключение
            Попытка
                Движения.ОстаткиТоваров.Записывать = Истина;
                Движения.ОстаткиТоваров.Очистить();
            Исключение
                Сообщить("Не удалось найти регистр для отмены движений");
            КонецПопытки;
        КонецПопытки;
    КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТехкарточкуДляБлюда(ГотовоеБлюдо)

    Если НЕ ЗначениеЗаполнено(ГотовоеБлюдо) Тогда
        Возврат Справочники.Техкарточки.ПустаяСсылка();
    КонецЕсли;

    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    Техкарточки.Ссылка КАК Техкарточка
        |ИЗ
        |    Справочник.Техкарточки КАК Техкарточки
        |ГДЕ
        |    Техкарточки.ГотовоеБлюдо = &ГотовоеБлюдо
        |    И НЕ Техкарточки.ПометкаУдаления";

        Запрос.УстановитьПараметр("ГотовоеБлюдо", ГотовоеБлюдо);

        Результат = Запрос.Выполнить();
        Если НЕ Результат.Пустой() Тогда
            Выборка = Результат.Выбрать();
            Выборка.Следующий();
            Возврат Выборка.Техкарточка;
        КонецЕсли;
    Исключение
        // Ошибка при запросе
    КонецПопытки;

    Возврат Справочники.Техкарточки.ПустаяСсылка();

КонецФункции

Функция ПолучитьСоставИнгредиентовИзТехкарточки(ГотовоеБлюдо, КоличествоПорций = 1)

    Техкарточка = ПолучитьТехкарточкуДляБлюда(ГотовоеБлюдо);
    СоставИнгредиентов = Новый ТаблицаЗначений;
    СоставИнгредиентов.Колонки.Добавить("Ингредиент");
    СоставИнгредиентов.Колонки.Добавить("КоличествоНаПорцию", Новый ОписаниеТипов("Число"));
    СоставИнгредиентов.Колонки.Добавить("ОбщееКоличество", Новый ОписаниеТипов("Число"));

    Если ЗначениеЗаполнено(Техкарточка) Тогда
        Попытка
            Для Каждого СтрокаИнгредиент Из Техкарточка.СоставИнгредиентов Цикл
                Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И СтрокаИнгредиент.НормаБрутто > 0 Тогда
                    НоваяСтрока = СоставИнгредиентов.Добавить();
                    НоваяСтрока.Ингредиент = СтрокаИнгредиент.Ингредиент;
                    НоваяСтрока.КоличествоНаПорцию = СтрокаИнгредиент.НормаБрутто / 1000; // Переводим граммы в килограммы
                    НоваяСтрока.ОбщееКоличество = НоваяСтрока.КоличествоНаПорцию * КоличествоПорций;
                КонецЕсли;
            КонецЦикла;
        Исключение
            // Ошибка при получении состава ингредиентов
        КонецПопытки;
    КонецЕсли;

    Возврат СоставИнгредиентов;

КонецФункции

Процедура СписатьИнгредиентыПоТехкарточкам(Отказ)

    // Упрощенная обработка - без реальных движений по регистрам
    Сообщить("=== СПИСАНИЕ ИНГРЕДИЕНТОВ ===");

    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл

        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда

            // Получаем состав ингредиентов из техкарточки
            СоставИнгредиентов = ПолучитьСоставИнгредиентовИзТехкарточки(СтрокаБлюда.Блюдо, СтрокаБлюда.КоличествоПорций);

            Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл

                Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И СтрокаИнгредиент.ОбщееКоличество > 0 Тогда

                    // Движение расхода ингредиента - упрощенно без реальных движений
                    Сообщить(СтрШаблон("РАСХОД: %1 - %2 кг со склада %3",
                        СтрокаИнгредиент.Ингредиент,
                        СтрокаИнгредиент.ОбщееКоличество,
                        СкладСырья));

                КонецЕсли;

            КонецЦикла;

        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

Процедура ОприходоватьГотовыеБлюда(Отказ)

    // Упрощенная обработка - без реальных движений по регистрам
    Сообщить("=== ОПРИХОДОВАНИЕ ГОТОВЫХ БЛЮД ===");
    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл

        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда

            // Движение прихода готового блюда - упрощенно без реальных движений
            Сообщить(СтрШаблон("ПРИХОД: %1 - %2 порций на склад %3 (стоимость %4 грн)",
                СтрокаБлюда.Блюдо,
                СтрокаБлюда.КоличествоПорций,
                СкладГотовойПродукции,
                СтрокаБлюда.ОбщаяПлановаяСебестоимость));

        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

#КонецОбласти