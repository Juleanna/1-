// Упрощенная форма документа "Приготовление блюда"

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    // Инициализация формы
    Если Объект.Ссылка.Пустая() Тогда
        // Заполнение значений по умолчанию для нового документа
        Объект.Дата = ТекущаяДата();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    // Простая обработка проведения без сложной логики
    Если ПриготавливаемыеБлюда.Количество() = 0 Тогда
        ДокументОтчет = Новый ТабличныйДокумент;
        ДокументОтчет.Область(1,1,1,1).Текст = "Не заполнен список приготавливаемых блюд";
        Сообщить("ОШИБКА: " + ДокументОтчет.Область(1,1,1,1).Текст);
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    // Проверяем заполненность данных
    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
        Если НЕ ЗначениеЗаполнено(СтрокаБлюда.Блюдо) Тогда
            ДокументОтчет = Новый ТабличныйДокумент;
            ДокументОтчет.Область(1,1,1,1).Текст = "Не заполнено блюдо в строке " + ПриготавливаемыеБлюда.Индекс(СтрокаБлюда) + 1;
            Сообщить("ОШИБКА: " + ДокументОтчет.Область(1,1,1,1).Текст);
            Отказ = Истина;
            Возврат;
        КонецЕсли;

        Если СтрокаБлюда.КоличествоПорций <= 0 Тогда
            ДокументОтчет = Новый ТабличныйДокумент;
            ДокументОтчет.Область(1,1,1,1).Текст = "Не заполнено количество порций для блюда " + СтрокаБлюда.Блюдо;
            Сообщить("ОШИБКА: " + ДокументОтчет.Область(1,1,1,1).Текст);
            Отказ = Истина;
            Возврат;
        КонецЕсли;
    КонецЦикла;

    // Проверяем наличие складов
    Если НЕ ЗначениеЗаполнено(СкладСырья) Тогда
        ДокументОтчет = Новый ТабличныйДокумент;
        ДокументОтчет.Область(1,1,1,1).Текст = "Не заполнен склад сырья";
        Сообщить("ОШИБКА: " + ДокументОтчет.Область(1,1,1,1).Текст);
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(СкладГотовойПродукции) Тогда
        ДокументОтчет = Новый ТабличныйДокумент;
        ДокументОтчет.Область(1,1,1,1).Текст = "Не заполнен склад готовой продукции";
        Сообщить("ОШИБКА: " + ДокументОтчет.Область(1,1,1,1).Текст);
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    РассчитатьОбщуюСебестоимость(ТекущаяСтрока);
    ОбновитьЗаголовокФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПриготавливаемыеБлюдаПлановаяСебестоимостьПорцииПриИзменении(Элемент)

    ТекущаяСтрока = Элементы.ПриготавливаемыеБлюда.ТекущиеДанные;
    Если ТекущаяСтрока = Неопределено Тогда
        Возврат;
    КонецЕсли;

    // Упрощенная обработка проведения без движений по регистрам
    // Просто выводим информацию о том, что будет списано/оприходовано

    // Списываем ингредиенты и оприходуем готовые блюда
    СписатьИнгредиентыПоТехкарточкам(Отказ);

    Если НЕ Отказ Тогда
        ОприходоватьГотовыеБлюда(Отказ);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДвиженияПоДокументу(Команда)

    ДокументОтчет = СоздатьОтчетДвиженийНаСервере();
    ДокументОтчет.Показать("Движения по документу");

КонецПроцедуры

&НаСервере
Функция СоздатьОтчетДвиженийНаСервере()

    ДокументОтчет = Новый ТабличныйДокумент;

    Если НЕ Объект.Проведен Тогда
        ДокументОтчет.Область(1,1).Текст = "Документ не проведен. Движений нет.";
        Возврат ДокументОтчет;
    КонецЕсли;

    // Заголовок отчета
    ДокументОтчет.Область(1,1,1,4).Объединить();
    ДокументОтчет.Область(1,1).Текст = "ДВИЖЕНИЯ ПО ДОКУМЕНТУ";
    ДокументОтчет.Область(1,1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
    ДокументОтчет.Область(1,1).Шрифт = Новый Шрифт(,14,Истина);

    ДокументОтчет.Область(2,1,2,4).Объединить();
    ДокументОтчет.Область(2,1).Текст = "Документ: " + Объект.Ссылка + " от " + Формат(Объект.Дата, "ДФ=dd.MM.yyyy");
    ДокументОтчет.Область(2,1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;

    НомерСтроки = 4;

    // Заголовок "РАСХОДЫ ИНГРЕДИЕНТОВ"
    ДокументОтчет.Область(НомерСтроки,1,НомерСтроки,4).Объединить();
    ДокументОтчет.Область(НомерСтроки,1).Текст = "РАСХОДЫ ИНГРЕДИЕНТОВ";
    ДокументОтчет.Область(НомерСтроки,1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
    ДокументОтчет.Область(НомерСтроки,1).Шрифт = Новый Шрифт(,,Истина);
    НомерСтроки = НомерСтроки + 1;

    Для Каждого СтрокаБлюда Из Объект.ПриготавливаемыеБлюда Цикл
        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда

            ДокументОтчет.Область(НомерСтроки,1,НомерСтроки,4).Объединить();
            ДокументОтчет.Область(НомерСтроки,1).Текст = СтрШаблон("Блюдо: %1 (%2 порций)", СтрокаБлюда.Блюдо, СтрокаБлюда.КоличествоПорций);
            ДокументОтчет.Область(НомерСтроки,1).Шрифт = Новый Шрифт(,,Истина);
            НомерСтроки = НомерСтроки + 1;

            СоставИнгредиентов = ПолучитьСоставИнгредиентовИзТехкарточки(СтрокаБлюда.Блюдо, СтрокаБлюда.КоличествоПорций);

            Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
                Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И СтрокаИнгредиент.ОбщееКоличество > 0 Тогда
                    ДокументОтчет.Область(НомерСтроки,1).Текст = "  - " + Строка(СтрокаИнгредиент.Ингредиент);
                    ДокументОтчет.Область(НомерСтроки,2).Текст = Формат(СтрокаИнгредиент.ОбщееКоличество, "ЧДЦ=3") + " кг";
                    ДокументОтчет.Область(НомерСтроки,3).Текст = "(расход)";
                    НомерСтроки = НомерСтроки + 1;
                КонецЕсли;
            КонецЦикла;
            НомерСтроки = НомерСтроки + 1; // Пустая строка между блюдами
        КонецЕсли;
    КонецЦикла;

    // Заголовок "ПРИХОД ГОТОВЫХ БЛЮД"
    ДокументОтчет.Область(НомерСтроки,1,НомерСтроки,4).Объединить();
    ДокументОтчет.Область(НомерСтроки,1).Текст = "ПРИХОД ГОТОВЫХ БЛЮД";
    ДокументОтчет.Область(НомерСтроки,1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
    ДокументОтчет.Область(НомерСтроки,1).Шрифт = Новый Шрифт(,,Истина);
    НомерСтроки = НомерСтроки + 1;

    Для Каждого СтрокаБлюда Из Объект.ПриготавливаемыеБлюда Цикл
        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
            ДокументОтчет.Область(НомерСтроки,1).Текст = "  + " + Строка(СтрокаБлюда.Блюдо);
            ДокументОтчет.Область(НомерСтроки,2).Текст = Строка(СтрокаБлюда.КоличествоПорций) + " порций";
            ДокументОтчет.Область(НомерСтроки,3).Текст = "стоимость " + Формат(СтрокаБлюда.ОбщаяПлановаяСебестоимость, "ЧДЦ=2") + " грн";
            ДокументОтчет.Область(НомерСтроки,4).Текст = "(приход)";
            НомерСтроки = НомерСтроки + 1;
        КонецЕсли;
    КонецЦикла;

    Возврат ДокументОтчет;

КонецФункции

&НаСервере
Функция ОстаткиНаСкладеНаСервере()

    Если НЕ ЗначениеЗаполнено(Объект.СкладСырья) И НЕ ЗначениеЗаполнено(Объект.СкладГотовойПродукции) Тогда
        Возврат "Не заполнены склады для просмотра остатков";
    КонецЕсли;

    ТекстОстатков = "";
    ТекстОстатков = ТекстОстатков + "=== ОСТАТКИ НА СКЛАДАХ ===" + Символы.ПС;
    ТекстОстатков = ТекстОстатков + "Дата: " + ТекущаяДата() + Символы.ПС + Символы.ПС;

    // Остатки ингредиентов на складе сырья
    Если ЗначениеЗаполнено(Объект.СкладСырья) Тогда
        ТекстОстатков = ТекстОстатков + "СКЛАД СЫРЬЯ: " + Объект.СкладСырья + Символы.ПС;

        // Получаем список всех ингредиентов из документа
        СписокИнгредиентов = Новый ТаблицаЗначений;
        СписокИнгредиентов.Колонки.Добавить("Ингредиент");
        СписокИнгредиентов.Колонки.Добавить("ТребуетсяКоличество", Новый ОписаниеТипов("Число"));

        Для Каждого СтрокаБлюда Из Объект.ПриготавливаемыеБлюда Цикл
            Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
                СоставИнгредиентов = ПолучитьСоставИнгредиентовИзТехкарточки(СтрокаБлюда.Блюдо, СтрокаБлюда.КоличествоПорций);

                Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
                    Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И СтрокаИнгредиент.ОбщееКоличество > 0 Тогда
                        // Ищем ингредиент в списке
                        НайденнаяСтрока = Неопределено;
                        Для Каждого СтрокаСписка Из СписокИнгредиентов Цикл
                            Если СтрокаСписка.Ингредиент = СтрокаИнгредиент.Ингредиент Тогда
                                НайденнаяСтрока = СтрокаСписка;
                                Прервать;
                            КонецЕсли;
                        КонецЦикла;

                        Если НайденнаяСтрока = Неопределено Тогда
                            НайденнаяСтрока = СписокИнгредиентов.Добавить();
                            НайденнаяСтрока.Ингредиент = СтрокаИнгредиент.Ингредиент;
                            НайденнаяСтрока.ТребуетсяКоличество = 0;
                        КонецЕсли;

                        НайденнаяСтрока.ТребуетсяКоличество = НайденнаяСтрока.ТребуетсяКоличество + СтрокаИнгредиент.ОбщееКоличество;
                    КонецЕсли;
                КонецЦикла;
            КонецЕсли;
        КонецЦикла;

        // Показываем остатки каждого ингредиента
        Для Каждого СтрокаИнгредиента Из СписокИнгредиентов Цикл
            ОстатокНаСкладе = ПолучитьОстатокТовараНаСкладе(СтрокаИнгредиента.Ингредиент, Объект.СкладСырья);

            СостояниеТекст = "";
            Если ОстатокНаСкладе >= СтрокаИнгредиента.ТребуетсяКоличество Тогда
                СостояниеТекст = "✅ ДОСТАТОЧНО";
            Иначе
                СостояниеТекст = "❌ НЕДОСТАТОК";
            КонецЕсли;

            ТекстОстатков = ТекстОстатков + СтрШаблон("  %1: остаток %2 кг, требуется %3 кг - %4",
                СтрокаИнгредиента.Ингредиент,
                ОстатокНаСкладе,
                СтрокаИнгредиента.ТребуетсяКоличество,
                СостояниеТекст) + Символы.ПС;
        КонецЦикла;

        ТекстОстатков = ТекстОстатков + Символы.ПС;
    КонецЕсли;

    // Остатки готовых блюд на складе готовой продукции
    Если ЗначениеЗаполнено(Объект.СкладГотовойПродукции) Тогда
        ТекстОстатков = ТекстОстатков + "СКЛАД ГОТОВОЙ ПРОДУКЦИИ: " + Объект.СкладГотовойПродукции + Символы.ПС;

        Для Каждого СтрокаБлюда Из Объект.ПриготавливаемыеБлюда Цикл
            Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) Тогда
                ОстатокГотовогоБлюда = ПолучитьОстатокТовараНаСкладе(СтрокаБлюда.Блюдо, Объект.СкладГотовойПродукции);
                БудетПослеПриготовления = ОстатокГотовогоБлюда + СтрокаБлюда.КоличествоПорций;

                ТекстОстатков = ТекстОстатков + СтрШаблон("  %1: текущий остаток %2 порций, будет добавлено %3, итого %4",
                    СтрокаБлюда.Блюдо,
                    ОстатокГотовогоБлюда,
                    СтрокаБлюда.КоличествоПорций,
                    БудетПослеПриготовления) + Символы.ПС;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;

    Возврат ТекстОстатков;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоТехкарточкамНаСервере()

    // Очищаем текущие данные
    Объект.ПриготавливаемыеБлюда.Очистить();

    // Получаем список всех техкарточек
    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ
        |    СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК Остаток
        |ИЗ
        |    РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура = &Ингредиент И Склад = &Склад) КАК ТоварыНаСкладахОстатки";

        Запрос.УстановитьПараметр("Ингредиент", Ингредиент);
        Запрос.УстановитьПараметр("Склад", Склад);

        Результат = Запрос.Выполнить();
        Если НЕ Результат.Пустой() Тогда
            Выборка = Результат.Выбрать();
            Если Выборка.Следующий() Тогда
                Возврат Выборка.Остаток;
            КонецЕсли;
        КонецЕсли;
    Исключение
        // Попробуем другие варианты названий регистра
        Попытка
            Запрос = Новый Запрос;
            Запрос.Текст =
            "ВЫБРАТЬ
            |    СУММА(РегистрТоварыНаСкладахОстатки.КоличествоОстаток) КАК Остаток
            |ИЗ
            |    РегистрНакопления.РегистрТоварыНаСкладах.Остатки(, Номенклатура = &Ингредиент И Склад = &Склад) КАК РегистрТоварыНаСкладахОстатки";

            Запрос.УстановитьПараметр("Ингредиент", Ингредиент);
            Запрос.УстановитьПараметр("Склад", Склад);

            Результат = Запрос.Выполнить();
            Если НЕ Результат.Пустой() Тогда
                Выборка = Результат.Выбрать();
                Если Выборка.Следующий() Тогда
                    Возврат Выборка.Остаток;
                КонецЕсли;
            КонецЕсли;
        Исключение
            // Возвращаем 0 если не удалось найти регистр
        КонецПопытки;
    КонецПопытки;

    Возврат 0;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТехкарточкуДляБлюда(ГотовоеБлюдо)

    Если НЕ ЗначениеЗаполнено(ГотовоеБлюдо) Тогда
        Возврат Справочники.Техкарточки.ПустаяСсылка();
    КонецЕсли;

    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    Техкарточки.Ссылка КАК Техкарточка
        |ИЗ
        |    Справочник.Техкарточки КАК Техкарточки
        |ГДЕ
        |    Техкарточки.ГотовоеБлюдо = &ГотовоеБлюдо
        |    И НЕ Техкарточки.ПометкаУдаления";

        Запрос.УстановитьПараметр("ГотовоеБлюдо", ГотовоеБлюдо);

        Результат = Запрос.Выполнить();
        Если НЕ Результат.Пустой() Тогда
            Выборка = Результат.Выбрать();
            Выборка.Следующий();
            Возврат Выборка.Техкарточка;
        КонецЕсли;
    Исключение
        // Ошибка при запросе
    КонецПопытки;

    Возврат Справочники.Техкарточки.ПустаяСсылка();

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьОбщуюСебестоимость(ТекущаяСтрока)

    // Простой расчет общей себестоимости
    Попытка
        КоличествоПорций = ТекущаяСтрока.КоличествоПорций;
    Исключение
        Попытка
            КоличествоПорций = ТекущаяСтрока.Количество;
        Исключение
            КоличествоПорций = 0;
        КонецПопытки;
    КонецПопытки;

    Если КоличествоПорций > 0 И ТекущаяСтрока.ПлановаяСебестоимостьПорции > 0 Тогда
        ТекущаяСтрока.ОбщаяПлановаяСебестоимость = КоличествоПорций * ТекущаяСтрока.ПлановаяСебестоимостьПорции;
    Иначе
        ТекущаяСтрока.ОбщаяПлановаяСебестоимость = 0;
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСебестоимостьИзТехкарточки(Блюдо)

    Если НЕ ЗначениеЗаполнено(Блюдо) Тогда
        Возврат 0;
    КонецЕсли;

    Попытка
        // Ищем техкарточку для данного блюда
        Запрос = Новый Запрос;
        Запрос.Текст =
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    Техкарточки.СебестоимостьПорции КАК СебестоимостьПорции
        |ИЗ
        |    Справочник.Техкарточки КАК Техкарточки
        |ГДЕ
        |    Техкарточки.ГотовоеБлюдо = &ГотовоеБлюдо
        |    И НЕ Техкарточки.ПометкаУдаления";

        Запрос.УстановитьПараметр("ГотовоеБлюдо", Блюдо);

        Результат = Запрос.Выполнить();
        Если НЕ Результат.Пустой() Тогда
            Выборка = Результат.Выбрать();
            Выборка.Следующий();
            Если Выборка.СебестоимостьПорции > 0 Тогда
                Возврат Выборка.СебестоимостьПорции;
            КонецЕсли;
        КонецЕсли;
    Исключение
        // Ошибка при запросе - используем примерные значения
    КонецПопытки;

    // Если техкарточка не найдена или себестоимость = 0, используем примерные значения
    НаименованиеБлюда = Строка(Блюдо);
    НаименованиеВНижнемРегистре = НРег(НаименованиеБлюда);

    Если Найти(НаименованиеВНижнемРегистре, "суп") > 0 Тогда
        Возврат 45; // 45 грн за порцию супа
    ИначеЕсли Найти(НаименованиеВНижнемРегистре, "салат") > 0 Тогда
        Возврат 35; // 35 грн за порцию салата
    ИначеЕсли Найти(НаименованиеВНижнемРегистре, "мясо") > 0
        Или Найти(НаименованиеВНижнемРегистре, "котлета") > 0
        Или Найти(НаименованиеВНижнемРегистре, "стейк") > 0 Тогда
        Возврат 85; // 85 грн за мясное блюдо
    ИначеЕсли Найти(НаименованиеВНижнемРегистре, "рыба") > 0 Тогда
        Возврат 75; // 75 грн за рыбное блюдо
    ИначеЕсли Найти(НаименованиеВНижнемРегистре, "паста") > 0
        Или Найти(НаименованиеВНижнемРегистре, "макароны") > 0 Тогда
        Возврат 40; // 40 грн за пасту
    ИначеЕсли Найти(НаименованиеВНижнемРегистре, "десерт") > 0
        Или Найти(НаименованиеВНижнемРегистре, "торт") > 0
        Или Найти(НаименованиеВНижнемРегистре, "мороженое") > 0 Тогда
        Возврат 25; // 25 грн за десерт
    Иначе
        Возврат 50; // 50 грн - средняя себестоимость
    КонецЕсли;

КонецФункции

Процедура ЗаписатьДвиженияПоРегистру(Отказ)

    Сообщить(">>> ЗАПИСЬ ВСЕХ ДВИЖЕНИЙ ДОКУМЕНТА В ОДИН НАБОР <<<");

    // Собираем все ингредиенты для списания
    ТаблицаСписания = Новый ТаблицаЗначений;
    ТаблицаСписания.Колонки.Добавить("Ингредиент");
    ТаблицаСписания.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
            СоставИнгредиентов = ПолучитьСоставИнгредиентовИзТехкарточки(СтрокаБлюда.Блюдо, СтрокаБлюда.КоличествоПорций);

            Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
                Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И СтрокаИнгредиент.ОбщееКоличество > 0 Тогда
                    НайденнаяСтрока = ТаблицаСписания.Найти(СтрокаИнгредиент.Ингредиент, "Ингредиент");
                    Если НайденнаяСтрока = Неопределено Тогда
                        НоваяСтрока = ТаблицаСписания.Добавить();
                        НоваяСтрока.Ингредиент = СтрокаИнгредиент.Ингредиент;
                        НоваяСтрока.Количество = СтрокаИнгредиент.ОбщееКоличество;
                    Иначе
                        НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + СтрокаИнгредиент.ОбщееКоличество;
                    КонецЕсли;
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;

    Сообщить("Собрано ингредиентов для списания: " + Формат(ТаблицаСписания.Количество(), "ЧГ=0"));
    Сообщить("Готовых блюд для оприходования: " + Формат(ПриготавливаемыеБлюда.Количество(), "ЧГ=0"));

    // ВАЖНО: Определяем какой регистр РЕАЛЬНО используется для остатков
    Сообщить(">>> ОПРЕДЕЛЯЕМ РЕГИСТР ДЛЯ ЗАПИСИ <<<");
    ИмяРегистраДляЗаписи = НайтиИмяРегистраНакопления();
    Сообщить("Найденный регистр для записи: " + ИмяРегистраДляЗаписи);

    // Получаем организацию для всех записей
    ОрганизацияДляЗаписи = Неопределено;
    Попытка
        ОрганизацияДляЗаписи = Справочники.Организации.ОсновнаяОрганизация;
    Исключение
        Попытка
            Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Организации");
            Результат = Запрос.Выполнить();
            Если НЕ Результат.Пустой() Тогда
                Выборка = Результат.Выбрать();
                Выборка.Следующий();
                ОрганизацияДляЗаписи = Выборка.Ссылка;
            КонецЕсли;
        Исключение
        КонецПопытки;
    КонецПопытки;

    Если ЗначениеЗаполнено(ОрганизацияДляЗаписи) Тогда
        Сообщить("Используется организация: " + Строка(ОрганизацияДляЗаписи));
    Иначе
        Сообщить("ВНИМАНИЕ: Организация не найдена!");
    КонецЕсли;

    Если ПустаяСтрока(ИмяРегистраДляЗаписи) Тогда
        Сообщить("ОШИБКА: Регистр для записи не найден!");
        Отказ = Истина;
        Возврат;
    КонецЕсли;

    Попытка
        // Создаем ОДИН набор записей для ВСЕХ движений документа
        НаборЗаписей = РегистрыНакопления[ИмяРегистраДляЗаписи].СоздатьНаборЗаписей();
        Сообщить("Набор записей создан для регистра: " + ИмяРегистраДляЗаписи);
        НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);

        // 1. Добавляем все записи РАСХОДА (списание ингредиентов)
        Сообщить("=== СПИСАНИЕ ИНГРЕДИЕНТОВ ===");

        // ОТЛАДКА: Проверяем успешность записи движений
        // Пробуем прочитать записи сразу после записи
        Сообщить("ОТЛАДКА: Проверяем записанные движения...");

        Для Каждого СтрокаСписания Из ТаблицаСписания Цикл
            НоваяЗапись = НаборЗаписей.Добавить();
            НоваяЗапись.Период = Дата;
            НоваяЗапись.Регистратор = Ссылка;
            НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
            НоваяЗапись.Номенклатура = СтрокаСписания.Ингредиент;
            НоваяЗапись.Склад = СкладСырья;

            // Заполняем организацию если она найдена
            Попытка
                Если ЗначениеЗаполнено(ОрганизацияДляЗаписи) Тогда
                    НоваяЗапись.Организация = ОрганизацияДляЗаписи;
                КонецЕсли;
            Исключение
            КонецПопытки;

            // Устанавливаем количество в поле ВНаличии
            НоваяЗапись.ВНаличии = СтрокаСписания.Количество;

            Сообщить("РАСХОД: " + Строка(СтрокаСписания.Ингредиент) + " - " + Формат(СтрокаСписания.Количество, "ЧДЦ=3") + " кг");
        КонецЦикла;

        // 2. Добавляем все записи ПРИХОДА (оприходование готовых блюд)
        Сообщить("=== ОПРИХОДОВАНИЕ ГОТОВЫХ БЛЮД ===");
        Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
            Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
                НоваяЗапись = НаборЗаписей.Добавить();
                НоваяЗапись.Период = Дата;
                НоваяЗапись.Регистратор = Ссылка;
                НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
                НоваяЗапись.Номенклатура = СтрокаБлюда.Блюдо;
                НоваяЗапись.Склад = СкладГотовойПродукции;

                // Заполняем организацию если она найдена
                Попытка
                    Если ЗначениеЗаполнено(ОрганизацияДляЗаписи) Тогда
                        НоваяЗапись.Организация = ОрганизацияДляЗаписи;
                    КонецЕсли;
                Исключение
                КонецПопытки;

                // Устанавливаем количество в поле ВНаличии
                НоваяЗапись.ВНаличии = СтрокаБлюда.КоличествоПорций;

                Сообщить("ПРИХОД: " + Строка(СтрокаБлюда.Блюдо) + " - " + Формат(СтрокаБлюда.КоличествоПорций, "ЧГ=0") + " порций");
            КонецЕсли;
        КонецЦикла;

        // 3. Записываем ВСЕ движения одной операцией
        Сообщить("Всего движений в наборе: " + Формат(НаборЗаписей.Количество(), "ЧГ=0"));
        НаборЗаписей.Записать();
        Сообщить("НаборЗаписей.Записать() выполнен");

        // Проверяем статус документа
        Сообщить("Статус документа - Проведен: " + ?(Проведен, "ДА", "НЕТ"));

        // ПРОВЕРКА: Читаем записи из регистра чтобы убедиться что они там есть
        Попытка
            ЗапросПроверки = Новый Запрос;
            ТекстЗапросаПроверки = "ВЫБРАТЬ ПЕРВЫЕ 3 * ИЗ РегистрНакопления." + ИмяРегистраДляЗаписи + " ГДЕ Регистратор = &Регистратор";
            ЗапросПроверки.Текст = ТекстЗапросаПроверки;

            ЗапросПроверки.УстановитьПараметр("Регистратор", Ссылка);
            РезультатПроверки = ЗапросПроверки.Выполнить();

            Сообщить("ПРОВЕРКА: В регистре найдено записей: " + Формат(РезультатПроверки.Выгрузить().Количество(), "ЧГ=0"));

            Если НЕ РезультатПроверки.Пустой() Тогда
                Сообщить("ПРОВЕРКА: Первые 3 записи из регистра:");
                ВыборкаПроверки = РезультатПроверки.Выбрать();
                Счетчик = 0;
                Пока ВыборкаПроверки.Следующий() И Счетчик < 3 Цикл
                    Счетчик = Счетчик + 1;
                    Сообщить("  Запись " + Формат(Счетчик, "ЧГ=0") + ":");
                    Сообщить("    Номенклатура: " + Строка(ВыборкаПроверки.Номенклатура));
                    Сообщить("    Склад: " + Строка(ВыборкаПроверки.Склад));
                    Сообщить("    ВидДвижения: " + Строка(ВыборкаПроверки.ВидДвижения));

                    // Пробуем вывести поле ВНаличии
                    Попытка
                        Сообщить("    ВНаличии: " + Формат(ВыборкаПроверки.ВНаличии, "ЧДЦ=3"));
                    Исключение
                        Сообщить("    ВНаличии: поля нет или не заполнено");
                    КонецПопытки;
                КонецЦикла;
            КонецЕсли;
        Исключение
            Сообщить("ОШИБКА проверки записей в регистре: " + ОписаниеОшибки());
        КонецПопытки;

        Сообщить("=== ВСЕ ДВИЖЕНИЯ УСПЕШНО ЗАПИСАНЫ ===");

    Исключение
        Сообщить("ОШИБКА при записи движений: " + ОписаниеОшибки());
        Отказ = Истина;
    КонецПопытки;

КонецПроцедуры

Процедура СписатьИнгредиентыПоТехкарточкам(Отказ)

    // Упрощенная обработка - с выводом в табличный документ
    ДокументОтчет = Новый ТабличныйДокумент;
    НомерСтроки = 1;

    // Заголовок
    ДокументОтчет.Область(1,1,1,4).Объединить();
    ДокументОтчет.Область(1,1).Текст = "СПИСАНИЕ ИНГРЕДИЕНТОВ";
    ДокументОтчет.Область(1,1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
    ДокументОтчет.Область(1,1).Шрифт = Новый Шрифт(,12,Истина);
    НомерСтроки = 3;

    // Шапка таблицы
    ДокументОтчет.Область(НомерСтроки,1).Текст = "Ингредиент";
    ДокументОтчет.Область(НомерСтроки,2).Текст = "Количество (кг)";
    ДокументОтчет.Область(НомерСтроки,3).Текст = "Склад";
    ДокументОтчет.Область(НомерСтроки,1,НомерСтроки,3).Шрифт = Новый Шрифт(,,Истина);
    НомерСтроки = НомерСтроки + 1;

    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл

        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда

            // Получаем состав ингредиентов из техкарточки
            СоставИнгредиентов = ПолучитьСоставИнгредиентовИзТехкарточки(СтрокаБлюда.Блюдо, СтрокаБлюда.КоличествоПорций);

            Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл

                Если ЗначениеЗаполнено(СтрокаИнгредиент.Ингредиент) И СтрокаИнгредиент.ОбщееКоличество > 0 Тогда

                    // Движение расхода ингредиента - вывод в таблицу
                    ДокументОтчет.Область(НомерСтроки,1).Текст = Строка(СтрокаИнгредиент.Ингредиент);
                    ДокументОтчет.Область(НомерСтроки,2).Текст = Формат(СтрокаИнгредиент.ОбщееКоличество, "ЧДЦ=3");
                    ДокументОтчет.Область(НомерСтроки,3).Текст = Строка(СкладСырья);
                    НомерСтроки = НомерСтроки + 1;

                КонецЕсли;

            КонецЦикла;

        КонецЕсли;

    КонецЦикла;

    ДокументОтчет.Напечатать(Ложь);

КонецПроцедуры

Процедура ОприходоватьГотовыеБлюда(Отказ)

    // Упрощенная обработка - без реальных движений по регистрам
    Сообщить("=== ОПРИХОДОВАНИЕ ГОТОВЫХ БЛЮД ===");
    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл

        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда

            // Движение прихода готового блюда - упрощенно без реальных движений
            Сообщить(СтрШаблон("ПРИХОД: %1 - %2 порций на склад %3 (стоимость %4 грн)",
                СтрокаБлюда.Блюдо,
                СтрокаБлюда.КоличествоПорций,
                СкладГотовойПродукции,
                СтрокаБлюда.ОбщаяПлановаяСебестоимость));

        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

Процедура ВывестиОтчетОНехваткеИнгредиентов(ТаблицаНехваток)

    Сообщить("==================================================");
    Сообщить("          НЕДОСТАТОЧНО ИНГРЕДИЕНТОВ НА СКЛАДЕ");
    Сообщить("==================================================");
    Сообщить("");

    Для Каждого СтрокаНехватки Из ТаблицаНехваток Цикл
        ТекстСообщения = СтрШаблон("НЕХВАТКА: %1 - Необходимо: %2 кг, На складе: %3 кг, Не хватает: %4 кг",
            СтрокаНехватки.Ингредиент,
            Формат(СтрокаНехватки.НеобходимоеКоличество, "ЧДЦ=3"),
            Формат(СтрокаНехватки.ФактическийОстаток, "ЧДЦ=3"),
            Формат(СтрокаНехватки.Нехватка, "ЧДЦ=3"));
        Сообщить(ТекстСообщения);
    КонецЦикла;

    Сообщить("");
    Сообщить("==================================================");

КонецПроцедуры

Процедура ВывестиОтчетОСписанииИнгредиентов(ДокументОтчет)

    Сообщить("==================================================");
    Сообщить("              СПИСАНИЕ ИНГРЕДИЕНТОВ");
    Сообщить("==================================================");
    Сообщить("");

    // Простой вывод через сообщения
    Сообщить("Отчет о списании ингредиентов сформирован");
    Сообщить("Данные отчета сохранены в табличном документе");

    Сообщить("");
    Сообщить("==================================================");

КонецФункции

#КонецОбласти