// Документ "Приготовление блюда" для списания ингредиентов при изготовлении готовых блюд
// Отдельно от процесса продажи

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
    
    // Оприходуем готовые блюда
    ОприходоватьГотовыеБлюда();
    
    // Списываем ингредиенты по рецептам
    СписатьИнгредиентыПоРецептам(Отказ);
    
КонецПроцедуры

Процедура ОбработкаОтменыПроведения(Отказ)
    
    // Отменяем движения при отмене проведения
    ОтменитьДвиженияПриготовления();
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОприходоватьГотовыеБлюда()
    
    // Движения по регистру остатков товаров (приход готовых блюд)
    Движения.ТоварыНаСкладах.Записывать = Истина;
    
    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
        
        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
            
            // Движение прихода готового блюда
            Движение = Движения.ТоварыНаСкладах.Добавить();
            Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
            Движение.Период = Дата;
            Движение.Склад = СкладГотовойПродукции;
            Движение.Номенклатура = СтрокаБлюда.Блюдо;
            Движение.Количество = СтрокаБлюда.КоличествоПорций;
            Движение.Стоимость = СтрокаБлюда.КоличествоПорций * ПолучитьСебестоимостьПорции(СтрокаБлюда.Блюдо);
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура СписатьИнгредиентыПоРецептам(Отказ)
    
    // Проверяем, есть ли блюда для приготовления
    Если ПриготавливаемыеБлюда.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
    
    // Движения по регистру остатков товаров (расход ингредиентов)
    Движения.ТоварыНаСкладах.Записывать = Истина;
    
    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
        
        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
            
            // Получаем рецепт для блюда
            Рецепт = НайтиРецептДляБлюда(СтрокаБлюда.Блюдо);
            
            Если НЕ ЗначениеЗаполнено(Рецепт) Тогда
                ТекстСообщения = СтрШаблон("Не найден рецепт для блюда ""%1""", СтрокаБлюда.Блюдо);
                Сообщение = Новый СообщениеПользователю;
                Сообщение.Текст = ТекстСообщения;
                Сообщение.УстановитьДанные(ЭтотОбъект);
                Сообщение.Поле = "ПриготавливаемыеБлюда[" + ПриготавливаемыеБлюда.Индекс(СтрокаБлюда) + "].Блюдо";
                Сообщение.Сообщить();
                Отказ = Истина;
                Продолжить;
            КонецЕсли;
            
            // Получаем состав ингредиентов для данного блюда
            СоставИнгредиентов = ПолучитьСоставИнгредиентовДляБлюда(СтрокаБлюда.Блюдо);
            
            Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
                
                // Рассчитываем необходимое количество ингредиента
                КоличествоДляСписания = СтрокаИнгредиент.КоличествоНаПорцию * СтрокаБлюда.КоличествоПорций;
                
                // Проверяем наличие ингредиента на складе
                ОстатокНаСкладе = ПолучитьОстатокНоменклатурыНаСкладе(СтрокаИнгредиент.Ингредиент, СкладСырья, Дата);
                
                Если ОстатокНаСкладе < КоличествоДляСписания Тогда
                    
                    ТекстСообщения = СтрШаблон("Недостаточно ингредиента ""%1"" на складе ""%2"". 
                                              |Требуется: %3 %4, доступно: %5 %4",
                                              СтрокаИнгредиент.Ингредиент,
                                              СкладСырья,
                                              КоличествоДляСписания,
                                              СтрокаИнгредиент.ЕдиницаИзмерения,
                                              ОстатокНаСкладе);
                    
                    Сообщение = Новый СообщениеПользователю;
                    Сообщение.Текст = ТекстСообщения;
                    Сообщение.УстановитьДанные(ЭтотОбъект);
                    Сообщение.Поле = "ПриготавливаемыеБлюда[" + ПриготавливаемыеБлюда.Индекс(СтрокаБлюда) + "].КоличествоПорций";
                    Сообщение.Сообщить();
                    
                    Отказ = Истина;
                    Продолжить;
                    
                КонецЕсли;
                
                // Создаем движение списания ингредиента
                Движение = Движения.ТоварыНаСкладах.Добавить();
                Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
                Движение.Период = Дата;
                Движение.Склад = СкладСырья;
                Движение.Номенклатура = СтрокаИнгредиент.Ингредиент;
                Движение.Количество = КоличествоДляСписания;
                Движение.Стоимость = КоличествоДляСписания * СтрокаИнгредиент.СтоимостьЕдиницы;
                
                // Регистрируем аналитику приготовления по рецепту
                Движение = Движения.ПриготовлениеПоРецептам.Добавить();
                Движение.Период = Дата;
                Движение.Рецепт = Рецепт;
                Движение.ГотовоеБлюдо = СтрокаБлюда.Блюдо;
                Движение.Ингредиент = СтрокаИнгредиент.Ингредиент;
                Движение.КоличествоПорций = СтрокаБлюда.КоличествоПорций;
                Движение.КоличествоИнгредиента = КоличествоДляСписания;
                Движение.СтоимостьИнгредиента = КоличествоДляСписания * СтрокаИнгредиент.СтоимостьЕдиницы;
                Движение.СкладСырья = СкладСырья;
                Движение.СкладГотовойПродукции = СкладГотовойПродукции;
                Движение.Повар = Повар;
                
            КонецЦикла;
            
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Функция НайтиРецептДляБлюда(ГотовоеБлюдо)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    КулинарныеРецепты.Ссылка КАК Рецепт
    |ИЗ
    |    Справочник.КулинарныеРецепты КАК КулинарныеРецепты
    |ГДЕ
    |    КулинарныеРецепты.ГотовоеБлюдо = &ГотовоеБлюдо
    |    И НЕ КулинарныеРецепты.ПометкаУдаления
    |    И КулинарныеРецепты.Активен = ИСТИНА";
    
    Запрос.УстановитьПараметр("ГотовоеБлюдо", ГотовоеБлюдо);
    
    Результат = Запрос.Выполнить();
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Возврат Выборка.Рецепт;
    Иначе
        Возврат Справочники.КулинарныеРецепты.ПустаяСсылка();
    КонецЕсли;
    
КонецФункции

Функция ПолучитьСоставИнгредиентовДляБлюда(ГотовоеБлюдо)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    ТехкарточкиСоставИнгредиентов.Ингредиент КАК Ингредиент,
    |    ТехкарточкиСоставИнгредиентов.НормаБрутто / 1000 КАК КоличествоНаПорцию,
    |    ""кг"" КАК ЕдиницаИзмерения,
    |    ЕСТЬNULL(ПоследниеЦеныНоменклатуры.Цена, 0) КАК СтоимостьЕдиницы
    |ИЗ
    |    Справочник.Техкарточки.СоставИнгредиентов КАК ТехкарточкиСоставИнгредиентов
    |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КулинарныеРецепты КАК КулинарныеРецепты
    |        ПО ТехкарточкиСоставИнгредиентов.Ссылка = КулинарныеРецепты.Техкарточка
    |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ) КАК ПоследниеЦеныНоменклатуры
    |        ПО ТехкарточкиСоставИнгредиентов.Ингредиент = ПоследниеЦеныНоменклатуры.Номенклатура
    |ГДЕ
    |    КулинарныеРецепты.ГотовоеБлюдо = &ГотовоеБлюдо
    |    И НЕ КулинарныеРецепты.ПометкаУдаления
    |    И НЕ КулинарныеРецепты.Техкарточка.ПометкаУдаления
    |    И ТехкарточкиСоставИнгредиентов.НормаБрутто > 0
    |    И КулинарныеРецепты.Активен = ИСТИНА";
    
    Запрос.УстановитьПараметр("ГотовоеБлюдо", ГотовоеБлюдо);
    Запрос.УстановитьПараметр("Дата", ТекущаяДата());
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

Функция ПолучитьОстатокНоменклатурыНаСкладе(Номенклатура, Склад, НаДату)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    СУММА(ТоварыНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток
    |ИЗ
    |    РегистрНакопления.ТоварыНаСкладах.Остатки(&НаДату, Номенклатура = &Номенклатура И Склад = &Склад) КАК ТоварыНаСкладахОстатки";
    
    Запрос.УстановитьПараметр("НаДату", НаДату);
    Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
    Запрос.УстановитьПараметр("Склад", Склад);
    
    Результат = Запрос.Выполнить();
    Если НЕ Результат.Пустой() Тогда
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Возврат ?(Выборка.КоличествоОстаток = Null, 0, Выборка.КоличествоОстаток);
    Иначе
        Возврат 0;
    КонецЕсли;
    
КонецФункции

Функция ПолучитьСебестоимостьПорции(ГотовоеБлюдо)
    
    СоставИнгредиентов = ПолучитьСоставИнгредиентовДляБлюда(ГотовоеБлюдо);
    Себестоимость = 0;
    
    Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
        Себестоимость = Себестоимость + (СтрокаИнгредиент.КоличествоНаПорцию * СтрокаИнгредиент.СтоимостьЕдиницы);
    КонецЦикла;
    
    Возврат Себестоимость;
    
КонецФункции

Процедура ОтменитьДвиженияПриготовления()
    
    // Очищаем все движения при отмене проведения
    Движения.ТоварыНаСкладах.Очистить();
    Движения.ПриготовлениеПоРецептам.Очистить();
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура СкладСырьяПриИзменении(Элемент)
    
    // Можно добавить проверку доступности ингредиентов на выбранном складе
    
КонецПроцедуры

Процедура СкладГотовойПродукцииПриИзменении(Элемент)
    
    // Можно добавить проверку возможности размещения готовой продукции
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриготавливаемыеБлюда

Процедура ПриготавливаемыеБлюдаБлюдоПриИзменении(Элемент)
    
    ТекущаяСтрока = Элементы.ПриготавливаемыеБлюда.ТекущиеДанные;
    Если ТекущаяСтрока = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    // Заполняем плановую себестоимость при выборе блюда
    Если ЗначениеЗаполнено(ТекущаяСтрока.Блюдо) Тогда
        ТекущаяСтрока.ПлановаяСебестоимостьПорции = ПолучитьСебестоимостьПорции(ТекущаяСтрока.Блюдо);
        ТекущаяСтрока.ОбщаяПлановаяСебестоимость = ТекущаяСтрока.ПлановаяСебестоимостьПорции * ТекущаяСтрока.КоличествоПорций;
    КонецЕсли;
    
КонецПроцедуры

Процедура ПриготавливаемыеБлюдаКоличествоПорцийПриИзменении(Элемент)
    
    ТекущаяСтрока = Элементы.ПриготавливаемыеБлюда.ТекущиеДанные;
    Если ТекущаяСтрока = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    // Пересчитываем общую себестоимость
    Если ЗначениеЗаполнено(ТекущаяСтрока.Блюдо) И ТекущаяСтрока.КоличествоПорций > 0 Тогда
        ТекущаяСтрока.ОбщаяПлановаяСебестоимость = ТекущаяСтрока.ПлановаяСебестоимостьПорции * ТекущаяСтрока.КоличествоПорций;
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ПроверитьНаличиеИнгредиентов(Команда)
    
    ПроверитьНаличиеИнгредиентовНаСервере();
    
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеИнгредиентовНаСервере()
    
    Если НЕ ЗначениеЗаполнено(СкладСырья) Тогда
        Сообщить("Укажите склад сырья");
        Возврат;
    КонецЕсли;
    
    ТекстПроверки = "";
    
    Для Каждого СтрокаБлюда Из ПриготавливаемыеБлюда Цикл
        
        Если ЗначениеЗаполнено(СтрокаБлюда.Блюдо) И СтрокаБлюда.КоличествоПорций > 0 Тогда
            
            СоставИнгредиентов = ПолучитьСоставИнгредиентовДляБлюда(СтрокаБлюда.Блюдо);
            
            Для Каждого СтрокаИнгредиент Из СоставИнгредиентов Цикл
                
                КоличествоДляСписания = СтрокаИнгредиент.КоличествоНаПорцию * СтрокаБлюда.КоличествоПорций;
                ОстатокНаСкладе = ПолучитьОстатокНоменклатурыНаСкладе(СтрокаИнгредиент.Ингредиент, СкладСырья, ТекущаяДата());
                
                Если ОстатокНаСкладе < КоличествоДляСписания Тогда
                    ТекстПроверки = ТекстПроверки + СтрШаблон("
                    |НЕДОСТАТОК: %1 - требуется %2, доступно %3",
                    СтрокаИнгредиент.Ингредиент,
                    КоличествоДляСписания,
                    ОстатокНаСкладе);
                КонецЕсли;
                
            КонецЦикла;
            
        КонецЕсли;
        
    КонецЦикла;
    
    Если ПустаяСтрока(ТекстПроверки) Тогда
        Сообщить("✓ Все ингредиенты доступны для приготовления");
    Иначе
        Сообщить("⚠ Обнаружены недостатки:" + ТекстПроверки);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти