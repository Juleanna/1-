////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ ДЛЯ РАСЧЕТА СЕБЕСТОИМОСТИ БЛЮД
// Автоматический расчет на основе цен ингредиентов из справочника
// Уникальное имя модуля: РасчетСебестоимостиМодуль
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Рассчитать себестоимость техкарточки
//
// Параметры:
//  ТехКарточкаСсылка - СправочникСсылка.Техкарточки - Ссылка на технологическую карту
//
// Возвращаемое значение:
//  Число - Себестоимость одной порции
//
Функция РассчитатьСебестоимостьТехКарточки(ТехКарточкаСсылка) Экспорт

	Если НЕ ЗначениеЗаполнено(ТехКарточкаСсылка) Тогда
		Возврат 0;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТехкарточкиСоставИнгредиентов.Ингредиент КАК Ингредиент,
	|	ТехкарточкиСоставИнгредиентов.НормаБрутто КАК НормаБрутто,
	|	ТехкарточкиСоставИнгредиентов.НормаНетто КАК НормаНетто,
	|	ТехкарточкиСоставИнгредиентов.ЦенаИнгредиента КАК ЦенаИнгредиента,
	|	ТехкарточкиСоставИнгредиентов.СтоимостьЕдиницы КАК СтоимостьЕдиницы
	|ИЗ
	|	Справочник.Техкарточки.СоставИнгредиентов КАК ТехкарточкиСоставИнгредиентов
	|ГДЕ
	|	ТехкарточкиСоставИнгредиентов.Ссылка = &ТехКарточка";

	Запрос.УстановитьПараметр("ТехКарточка", ТехКарточкаСсылка);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	ОбщаяСебестоимость = 0;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		// Получаем цену ингредиента
		ЦенаЗаКг = ПолучитьЦенуИнгредиента(
			ВыборкаДетальныеЗаписи.Ингредиент,
			ВыборкаДетальныеЗаписи.ЦенаИнгредиента
		);

		// Рассчитываем стоимость ингредиента в рецепте
		// НормаБрутто в граммах, цена за килограмм
		СтоимостьИнгредиента = (ВыборкаДетальныеЗаписи.НормаБрутто / 1000) * ЦенаЗаКг;

		ОбщаяСебестоимость = ОбщаяСебестоимость + СтоимостьИнгредиента;

	КонецЦикла;

	Возврат ОбщаяСебестоимость;

КонецФункции

// Получить цену ингредиента из справочника цен
//
// Параметры:
//  Ингредиент - СправочникСсылка.Номенклатура - Ингредиент
//  ЦенаИнгредиента - СправочникСсылка.ЦеныНаИнгредиенты - Ссылка на цену (необязательно)
//
// Возвращаемое значение:
//  Число - Цена за килограмм
//
Функция ПолучитьЦенуИнгредиента(Ингредиент, ЦенаИнгредиента = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Ингредиент) Тогда
		Возврат 0;
	КонецЕсли;

	// Если указана конкретная цена, используем её
	Если ЗначениеЗаполнено(ЦенаИнгредиента) Тогда
		Возврат ЦенаИнгредиента.ЦенаЗаЕдиницу;
	КонецЕсли;

	// Иначе ищем активную цену для данного ингредиента
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНаИнгредиенты.ЦенаЗаЕдиницу КАК ЦенаЗаЕдиницу,
	|	ЦеныНаИнгредиенты.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЦеныНаИнгредиенты КАК ЦеныНаИнгредиенты
	|ГДЕ
	|	ЦеныНаИнгредиенты.Ингредиент = &Ингредиент
	|	И ЦеныНаИнгредиенты.Активность = ИСТИНА
	|	И НЕ ЦеныНаИнгредиенты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЦеныНаИнгредиенты.ДатаУстановкиЦены УБЫВ";

	Запрос.УстановитьПараметр("Ингредиент", Ингредиент);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	// Приводим цену к килограммам (если единица измерения не кг)
	ЦенаЗаКг = ПривестиЦенуККилограммам(Выборка.ЦенаЗаЕдиницу, Выборка.ЕдиницаИзмерения);

	Возврат ЦенаЗаКг;

КонецФункции

// Автоматически обновить цены в строках техкарточки
//
// Параметры:
//  ТехКарточкаОбъект - СправочникОбъект.Техкарточки - Объект технологической карты
//
Процедура ОбновитьЦеныВТехКарточке(ТехКарточкаОбъект) Экспорт

	Для Каждого СтрокаИнгредиент Из ТехКарточкаОбъект.СоставИнгредиентов Цикл

		// Получаем актуальную цену
		ЦенаЗаКг = ПолучитьЦенуИнгредиента(СтрокаИнгредиент.Ингредиент, СтрокаИнгредиент.ЦенаИнгредиента);

		// Обновляем цену в строке
		СтрокаИнгредиент.СтоимостьЕдиницы = ЦенаЗаКг;

		// Рассчитываем общую стоимость ингредиента в рецепте
		СтрокаИнгредиент.СуммаСтоимости = (СтрокаИнгредиент.НормаБрутто / 1000) * ЦенаЗаКг;

	КонецЦикла;

	// Рассчитываем общую себестоимость порции
	ТехКарточкаОбъект.СебестоимостьПорции = РассчитатьОбщуюСебестоимость(ТехКарточкаОбъект);

КонецПроцедуры

// Обновить цены во всех технологических картах, использующих ингредиент
//
// Параметры:
//  Ингредиент - СправочникСсылка.Номенклатура - Ингредиент
//
Процедура ОбновитьЦеныПоИнгредиенту(Ингредиент) Экспорт

	Если НЕ ЗначениеЗаполнено(Ингредиент) Тогда
		Возврат;
	КонецЕсли;

	// Находим все техкарточки, использующие данный ингредиент
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТехкарточкиСоставИнгредиентов.Ссылка КАК ТехКарточка
	|ИЗ
	|	Справочник.Техкарточки.СоставИнгредиентов КАК ТехкарточкиСоставИнгредиентов
	|ГДЕ
	|	ТехкарточкиСоставИнгредиентов.Ингредиент = &Ингредиент
	|	И НЕ ТехкарточкиСоставИнгредиентов.Ссылка.ПометкаУдаления";

	Запрос.УстановитьПараметр("Ингредиент", Ингредиент);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

		ТехКарточкаОбъект = ВыборкаДетальныеЗаписи.ТехКарточка.ПолучитьОбъект();

		Если ТехКарточкаОбъект <> Неопределено Тогда
			ОбновитьЦеныВТехКарточке(ТехКарточкаОбъект);

			Попытка
				ТехКарточкаОбъект.Записать();
			Исключение
				// Логируем ошибку, но продолжаем обработку
				ЗаписьЖурналаРегистрации("Обновление цен",
					УровеньЖурналаРегистрации.Ошибка,
					,
					ВыборкаДетальныеЗаписи.ТехКарточка,
					"Ошибка при обновлении цен в техкарточке: " + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Рассчитать общую себестоимость порции
//
// Параметры:
//  ТехКарточкаОбъект - СправочникОбъект.Техкарточки
//
// Возвращаемое значение:
//  Число - Общая себестоимость порции
//
Функция РассчитатьОбщуюСебестоимость(ТехКарточкаОбъект)

	ОбщаяСебестоимость = 0;

	Для Каждого СтрокаИнгредиент Из ТехКарточкаОбъект.СоставИнгредиентов Цикл
		ОбщаяСебестоимость = ОбщаяСебестоимость + СтрокаИнгредиент.СуммаСтоимости;
	КонецЦикла;

	Возврат ОбщаяСебестоимость;

КонецФункции

// Привести цену к килограммам
//
// Параметры:
//  ЦенаЗаЕдиницу - Число - Цена за единицу измерения
//  ЕдиницаИзмерения - СправочникСсылка.КлассификаторЕдиницИзмерения - Единица измерения
//
// Возвращаемое значение:
//  Число - Цена за килограмм
//
Функция ПривестиЦенуККилограммам(ЦенаЗаЕдиницу, ЕдиницаИзмерения)

	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		// Если единица измерения не указана, считаем что цена за кг
		Возврат ЦенаЗаЕдиницу;
	КонецЕсли;

	// Получаем коэффициент перевода в килограммы
	КоэффициентПеревода = ПолучитьКоэффициентПереводаВКилограммы(ЕдиницаИзмерения);

	Если КоэффициентПеревода = 0 Тогда
		Возврат ЦенаЗаЕдиницу; // Возвращаем исходную цену, если не можем перевести
	КонецЕсли;

	Возврат ЦенаЗаЕдиницу / КоэффициентПеревода;

КонецФункции

// Получить коэффициент перевода единицы измерения в килограммы
//
// Параметры:
//  ЕдиницаИзмерения - СправочникСсылка.КлассификаторЕдиницИзмерения
//
// Возвращаемое значение:
//  Число - Коэффициент перевода (1 кг = ? единиц)
//
Функция ПолучитьКоэффициентПереводаВКилограммы(ЕдиницаИзмерения)

	// Получаем код единицы измерения
	КодЕдиницы = СокрЛП(ВРег(ЕдиницаИзмерения.Код));

	// Стандартные коэффициенты перевода
	Если КодЕдиницы = "166" ИЛИ КодЕдиницы = "КГ" Тогда
		Возврат 1; // килограмм
	ИначеЕсли КодЕдиницы = "163" ИЛИ КодЕдиницы = "Г" Тогда
		Возврат 1000; // грамм
	ИначеЕсли КодЕдиницы = "113" ИЛИ КодЕдиницы = "Т" Тогда
		Возврат 0.001; // тонна
	ИначеЕсли КодЕдиницы = "112" ИЛИ КодЕдиницы = "Л" Тогда
		Возврат 1; // литр (приблизительно равен кг для воды)
	Иначе
		// Для неизвестных единиц возвращаем 1 (считаем что цена уже в кг)
		Возврат 1;
	КонецЕсли;

КонецФункции

#КонецОбласти